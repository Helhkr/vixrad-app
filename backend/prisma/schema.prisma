// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NOSSOS MODELOS DE DADOS CORRIGIDOS ---

model User {
  id                       String        @id @default(uuid())
  name                     String
  email                    String        @unique
  password_hash                 String
  cpf                      String        @unique
  crm                      String        @unique
  crm_uf                   String
  is_admin                 Boolean       @default(false)
  is_email_verified        Boolean       @default(false)
  email_verification_token String?       @unique
  stripe_customer_id       String?       @unique
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  subscription             Subscription?
  templates                Template[]    // changed to array
  audit_logs               AuditLog[]    // changed to array

  @@unique([crm, crm_uf])
}

model Subscription {
  id                     String   @id @default(uuid())
  user_id                String   @unique
  user                   User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stripe_subscription_id String   @unique
  plan_type              String
  status                 SubscriptionStatus
  current_period_end     DateTime
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}

model Template {
  id         String   @id @default(uuid())
  name       String   // Ex: "Ultrassonografia do Abdome Total"
  modality   String   // Ex: "Ultrassonografia"
  specialty  String   // Ex: "Medicina Interna"

  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  
  sections   TemplateSection[] // Um template agora é composto por seções

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TemplateSection {
  id            String   @id @default(uuid())
  title         String   // Ex: "Técnica", "Análise", "Impressão Diagnóstica"
  display_order Int

  templateId    String
  template      Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  subsections   TemplateSubsection[] // Cada seção tem várias subseções

  createdAt     DateTime @default(now())
}

model TemplateSubsection {
  id            String   @id @default(uuid())
  title         String   // Ex: "Fígado", "Vias Biliares", "Vesícula Biliar"
  display_order Int

  // O conteúdo aqui guarda as opções interativas (botões, caixas de texto)
  // que aparecerão na coluna do meio. O formato JSON é perfeito para isso.
  // Ex: { "options": [{ "label": "NORMAL", "text": "Fígado com dimensões normais..." }] }
  content       Json

  sectionId     String
  section       TemplateSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
}

model AuditLog {
  id                   BigInt   @id @default(autoincrement())
  user_id              String
  user                 User     @relation(fields: [user_id], references: [id])
  action               String
  target_resource_id   String?
  target_resource_type String?
  ip_address           String?
  user_agent           String?
  data_snapshot        Json?
  timestamp            DateTime @default(now())
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}