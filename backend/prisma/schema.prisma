// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum UfEnum {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}


enum InteractiveElementType {
  SINGLE_CHOICE // Botões de rádio (só um pode ser selecionado)
  MULTIPLE_CHOICE // Checkboxes (vários podem ser selecionados)
  TEXT_INPUT    // Campo de texto livre
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  name               String    
  cpf                String    @unique
  crm                String    
  crmUf              UfEnum    
  role               UserRole  @default(USER)
  stripeCustomerId   String?
  subscriptionStatus String?
  trialEndsAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Modality {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  templates Template[]
}

model Template {
  id          String   @id @default(uuid())
  name        String
  baseContent String   @default("")
  modalityId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  modality Modality  @relation(fields: [modalityId], references: [id])
  sections Section[]
}

model Section {
  id         String   @id @default(uuid())
  name       String
  order      Int
  templateId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  template    Template     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  subsections Subsection[]
}

model Subsection {
  id        String   @id @default(uuid())
  name      String
  order     Int
  sectionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section       Section        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  elementGroups ElementGroup[]
}

model ElementGroup {
  id           String   @id @default(uuid())
  name         String
  order        Int
  subsectionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subsection            Subsection             @relation(fields: [subsectionId], references: [id], onDelete: Cascade)
  interactiveElements   InteractiveElement[]
  triggeredByActionRule ActionRule?
}

model InteractiveElement {
  id             String                 @id @default(uuid())
  label          String
  type           InteractiveElementType
  order          Int
  elementGroupId String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  elementGroup ElementGroup @relation(fields: [elementGroupId], references: [id], onDelete: Cascade)
  options      Option[]
}

model Option {
  id                   String   @id @default(uuid())
  label                String
  textToAdd            String
  order                Int
  isDefault            Boolean  @default(false)
  interactiveElementId String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  interactiveElement  InteractiveElement @relation(fields: [interactiveElementId], references: [id], onDelete: Cascade)
  triggersActionRules ActionRule[]
}

model ActionRule {
  id                   String   @id @default(uuid())
  triggerOptionId      String   @unique
  targetElementGroupId String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  triggerOption      Option       @relation(fields: [triggerOptionId], references: [id], onDelete: Cascade)
  targetElementGroup ElementGroup @relation(fields: [targetElementGroupId], references: [id], onDelete: Cascade)
}