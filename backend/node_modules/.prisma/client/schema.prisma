// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String        @id @default(uuid())
  name                          String
  email                         String        @unique
  password_hash                 String
  cpf                           String        @unique
  crm                           String
  crm_uf                        String
  is_admin                      Boolean       @default(false)
  is_email_verified             Boolean       @default(false)
  email_verification_token      String?       @unique
  email_verification_expires_at DateTime?
  stripe_customer_id            String?       @unique
  created_at                    DateTime      @default(now())
  updated_at                    DateTime      @updatedAt
  subscription                  Subscription?
  templates                     Template[]
  reports                       Report[]
  audit_logs                    AuditLog[]

  @@unique([crm, crm_uf])
}

model Subscription {
  id                     String             @id @default(uuid())
  user_id                String             @unique
  user                   User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  stripe_subscription_id String             @unique
  plan_type              String
  status                 SubscriptionStatus
  current_period_end     DateTime
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
}

model TemplateCategory {
  id        String     @id @default(uuid())
  name      String     @unique
  templates Template[]
  createdAt DateTime   @default(now())
}

model Template {
  id            String            @id @default(uuid())
  name          String
  created_by    User              @relation(fields: [created_by_id], references: [id])
  created_by_id String
  category_id   String?
  category      TemplateCategory? @relation(fields: [category_id], references: [id])
  sections      TemplateSection[]
  actionRules   ActionRule[]
  reports       Report[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model TemplateSection {
  id            String       @id @default(uuid())
  template_id   String
  template      Template     @relation(fields: [template_id], references: [id], onDelete: Cascade)
  title         String
  default_text  String?
  display_order Int
  content       Json?
  reportData    ReportData[]
  createdAt     DateTime     @default(now())
}

model ActionRule {
  id                String   @id @default(uuid())
  template_id       String
  template          Template @relation(fields: [template_id], references: [id], onDelete: Cascade)
  source_action_id  String
  target_section_id String
  action_text       String
  createdAt         DateTime @default(now())
}

model Report {
  id          String       @id @default(uuid())
  user_id     String
  user        User         @relation(fields: [user_id], references: [id])
  template_id String
  template    Template     @relation(fields: [template_id], references: [id])
  status      String       @default("draft")
  pdf_url     String?
  reportData  ReportData[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ReportData {
  id         String          @id @default(uuid())
  report_id  String
  report     Report          @relation(fields: [report_id], references: [id], onDelete: Cascade)
  section_id String
  section    TemplateSection @relation(fields: [section_id], references: [id], onDelete: Cascade)
  content    String?

  @@unique([report_id, section_id])
}

model Letterhead {
  id               String   @id @default(uuid())
  name             String
  header_image_url String?
  footer_image_url String?
  createdAt        DateTime @default(now())
}

model AuditLog {
  id                   BigInt   @id @default(autoincrement())
  user_id              String
  user                 User     @relation(fields: [user_id], references: [id])
  action               String
  target_resource_id   String?
  target_resource_type String?
  ip_address           String?
  user_agent           String?
  data_snapshot        Json?
  timestamp            DateTime @default(now())
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}
