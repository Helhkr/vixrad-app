
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model TemplateCategory
 * 
 */
export type TemplateCategory = $Result.DefaultSelection<Prisma.$TemplateCategoryPayload>
/**
 * Model Template
 * 
 */
export type Template = $Result.DefaultSelection<Prisma.$TemplatePayload>
/**
 * Model TemplateSection
 * 
 */
export type TemplateSection = $Result.DefaultSelection<Prisma.$TemplateSectionPayload>
/**
 * Model ActionRule
 * 
 */
export type ActionRule = $Result.DefaultSelection<Prisma.$ActionRulePayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model ReportData
 * 
 */
export type ReportData = $Result.DefaultSelection<Prisma.$ReportDataPayload>
/**
 * Model Letterhead
 * 
 */
export type Letterhead = $Result.DefaultSelection<Prisma.$LetterheadPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SubscriptionStatus: {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  PAST_DUE: 'PAST_DUE',
  TRIALING: 'TRIALING'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]

}

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs>;

  /**
   * `prisma.templateCategory`: Exposes CRUD operations for the **TemplateCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TemplateCategories
    * const templateCategories = await prisma.templateCategory.findMany()
    * ```
    */
  get templateCategory(): Prisma.TemplateCategoryDelegate<ExtArgs>;

  /**
   * `prisma.template`: Exposes CRUD operations for the **Template** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Templates
    * const templates = await prisma.template.findMany()
    * ```
    */
  get template(): Prisma.TemplateDelegate<ExtArgs>;

  /**
   * `prisma.templateSection`: Exposes CRUD operations for the **TemplateSection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TemplateSections
    * const templateSections = await prisma.templateSection.findMany()
    * ```
    */
  get templateSection(): Prisma.TemplateSectionDelegate<ExtArgs>;

  /**
   * `prisma.actionRule`: Exposes CRUD operations for the **ActionRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActionRules
    * const actionRules = await prisma.actionRule.findMany()
    * ```
    */
  get actionRule(): Prisma.ActionRuleDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.reportData`: Exposes CRUD operations for the **ReportData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportData
    * const reportData = await prisma.reportData.findMany()
    * ```
    */
  get reportData(): Prisma.ReportDataDelegate<ExtArgs>;

  /**
   * `prisma.letterhead`: Exposes CRUD operations for the **Letterhead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Letterheads
    * const letterheads = await prisma.letterhead.findMany()
    * ```
    */
  get letterhead(): Prisma.LetterheadDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Subscription: 'Subscription',
    TemplateCategory: 'TemplateCategory',
    Template: 'Template',
    TemplateSection: 'TemplateSection',
    ActionRule: 'ActionRule',
    Report: 'Report',
    ReportData: 'ReportData',
    Letterhead: 'Letterhead',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "subscription" | "templateCategory" | "template" | "templateSection" | "actionRule" | "report" | "reportData" | "letterhead" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      TemplateCategory: {
        payload: Prisma.$TemplateCategoryPayload<ExtArgs>
        fields: Prisma.TemplateCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplateCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplateCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>
          }
          findFirst: {
            args: Prisma.TemplateCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplateCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>
          }
          findMany: {
            args: Prisma.TemplateCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>[]
          }
          create: {
            args: Prisma.TemplateCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>
          }
          createMany: {
            args: Prisma.TemplateCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplateCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>[]
          }
          delete: {
            args: Prisma.TemplateCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>
          }
          update: {
            args: Prisma.TemplateCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>
          }
          deleteMany: {
            args: Prisma.TemplateCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplateCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TemplateCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateCategoryPayload>
          }
          aggregate: {
            args: Prisma.TemplateCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplateCategory>
          }
          groupBy: {
            args: Prisma.TemplateCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplateCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplateCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<TemplateCategoryCountAggregateOutputType> | number
          }
        }
      }
      Template: {
        payload: Prisma.$TemplatePayload<ExtArgs>
        fields: Prisma.TemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          findFirst: {
            args: Prisma.TemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          findMany: {
            args: Prisma.TemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>[]
          }
          create: {
            args: Prisma.TemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          createMany: {
            args: Prisma.TemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>[]
          }
          delete: {
            args: Prisma.TemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          update: {
            args: Prisma.TemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          deleteMany: {
            args: Prisma.TemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          aggregate: {
            args: Prisma.TemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplate>
          }
          groupBy: {
            args: Prisma.TemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplateCountArgs<ExtArgs>
            result: $Utils.Optional<TemplateCountAggregateOutputType> | number
          }
        }
      }
      TemplateSection: {
        payload: Prisma.$TemplateSectionPayload<ExtArgs>
        fields: Prisma.TemplateSectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplateSectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplateSectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>
          }
          findFirst: {
            args: Prisma.TemplateSectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplateSectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>
          }
          findMany: {
            args: Prisma.TemplateSectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>[]
          }
          create: {
            args: Prisma.TemplateSectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>
          }
          createMany: {
            args: Prisma.TemplateSectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplateSectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>[]
          }
          delete: {
            args: Prisma.TemplateSectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>
          }
          update: {
            args: Prisma.TemplateSectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>
          }
          deleteMany: {
            args: Prisma.TemplateSectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplateSectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TemplateSectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateSectionPayload>
          }
          aggregate: {
            args: Prisma.TemplateSectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplateSection>
          }
          groupBy: {
            args: Prisma.TemplateSectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplateSectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplateSectionCountArgs<ExtArgs>
            result: $Utils.Optional<TemplateSectionCountAggregateOutputType> | number
          }
        }
      }
      ActionRule: {
        payload: Prisma.$ActionRulePayload<ExtArgs>
        fields: Prisma.ActionRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActionRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActionRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>
          }
          findFirst: {
            args: Prisma.ActionRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActionRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>
          }
          findMany: {
            args: Prisma.ActionRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>[]
          }
          create: {
            args: Prisma.ActionRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>
          }
          createMany: {
            args: Prisma.ActionRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActionRuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>[]
          }
          delete: {
            args: Prisma.ActionRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>
          }
          update: {
            args: Prisma.ActionRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>
          }
          deleteMany: {
            args: Prisma.ActionRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActionRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActionRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionRulePayload>
          }
          aggregate: {
            args: Prisma.ActionRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActionRule>
          }
          groupBy: {
            args: Prisma.ActionRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActionRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActionRuleCountArgs<ExtArgs>
            result: $Utils.Optional<ActionRuleCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      ReportData: {
        payload: Prisma.$ReportDataPayload<ExtArgs>
        fields: Prisma.ReportDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>
          }
          findFirst: {
            args: Prisma.ReportDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>
          }
          findMany: {
            args: Prisma.ReportDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>[]
          }
          create: {
            args: Prisma.ReportDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>
          }
          createMany: {
            args: Prisma.ReportDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>[]
          }
          delete: {
            args: Prisma.ReportDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>
          }
          update: {
            args: Prisma.ReportDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>
          }
          deleteMany: {
            args: Prisma.ReportDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportDataPayload>
          }
          aggregate: {
            args: Prisma.ReportDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportData>
          }
          groupBy: {
            args: Prisma.ReportDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportDataCountArgs<ExtArgs>
            result: $Utils.Optional<ReportDataCountAggregateOutputType> | number
          }
        }
      }
      Letterhead: {
        payload: Prisma.$LetterheadPayload<ExtArgs>
        fields: Prisma.LetterheadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LetterheadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LetterheadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>
          }
          findFirst: {
            args: Prisma.LetterheadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LetterheadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>
          }
          findMany: {
            args: Prisma.LetterheadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>[]
          }
          create: {
            args: Prisma.LetterheadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>
          }
          createMany: {
            args: Prisma.LetterheadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LetterheadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>[]
          }
          delete: {
            args: Prisma.LetterheadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>
          }
          update: {
            args: Prisma.LetterheadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>
          }
          deleteMany: {
            args: Prisma.LetterheadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LetterheadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LetterheadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LetterheadPayload>
          }
          aggregate: {
            args: Prisma.LetterheadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLetterhead>
          }
          groupBy: {
            args: Prisma.LetterheadGroupByArgs<ExtArgs>
            result: $Utils.Optional<LetterheadGroupByOutputType>[]
          }
          count: {
            args: Prisma.LetterheadCountArgs<ExtArgs>
            result: $Utils.Optional<LetterheadCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    templates: number
    reports: number
    audit_logs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    templates?: boolean | UserCountOutputTypeCountTemplatesArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    audit_logs?: boolean | UserCountOutputTypeCountAudit_logsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAudit_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type TemplateCategoryCountOutputType
   */

  export type TemplateCategoryCountOutputType = {
    templates: number
  }

  export type TemplateCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    templates?: boolean | TemplateCategoryCountOutputTypeCountTemplatesArgs
  }

  // Custom InputTypes
  /**
   * TemplateCategoryCountOutputType without action
   */
  export type TemplateCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategoryCountOutputType
     */
    select?: TemplateCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TemplateCategoryCountOutputType without action
   */
  export type TemplateCategoryCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
  }


  /**
   * Count Type TemplateCountOutputType
   */

  export type TemplateCountOutputType = {
    sections: number
    actionRules: number
    reports: number
  }

  export type TemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sections?: boolean | TemplateCountOutputTypeCountSectionsArgs
    actionRules?: boolean | TemplateCountOutputTypeCountActionRulesArgs
    reports?: boolean | TemplateCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * TemplateCountOutputType without action
   */
  export type TemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCountOutputType
     */
    select?: TemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TemplateCountOutputType without action
   */
  export type TemplateCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateSectionWhereInput
  }

  /**
   * TemplateCountOutputType without action
   */
  export type TemplateCountOutputTypeCountActionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionRuleWhereInput
  }

  /**
   * TemplateCountOutputType without action
   */
  export type TemplateCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type TemplateSectionCountOutputType
   */

  export type TemplateSectionCountOutputType = {
    reportData: number
  }

  export type TemplateSectionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportData?: boolean | TemplateSectionCountOutputTypeCountReportDataArgs
  }

  // Custom InputTypes
  /**
   * TemplateSectionCountOutputType without action
   */
  export type TemplateSectionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSectionCountOutputType
     */
    select?: TemplateSectionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TemplateSectionCountOutputType without action
   */
  export type TemplateSectionCountOutputTypeCountReportDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDataWhereInput
  }


  /**
   * Count Type ReportCountOutputType
   */

  export type ReportCountOutputType = {
    reportData: number
  }

  export type ReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportData?: boolean | ReportCountOutputTypeCountReportDataArgs
  }

  // Custom InputTypes
  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCountOutputType
     */
    select?: ReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountReportDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDataWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password_hash: string | null
    cpf: string | null
    crm: string | null
    crm_uf: string | null
    is_admin: boolean | null
    is_email_verified: boolean | null
    email_verification_token: string | null
    email_verification_expires_at: Date | null
    stripe_customer_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password_hash: string | null
    cpf: string | null
    crm: string | null
    crm_uf: string | null
    is_admin: boolean | null
    is_email_verified: boolean | null
    email_verification_token: string | null
    email_verification_expires_at: Date | null
    stripe_customer_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password_hash: number
    cpf: number
    crm: number
    crm_uf: number
    is_admin: number
    is_email_verified: number
    email_verification_token: number
    email_verification_expires_at: number
    stripe_customer_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    cpf?: true
    crm?: true
    crm_uf?: true
    is_admin?: true
    is_email_verified?: true
    email_verification_token?: true
    email_verification_expires_at?: true
    stripe_customer_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    cpf?: true
    crm?: true
    crm_uf?: true
    is_admin?: true
    is_email_verified?: true
    email_verification_token?: true
    email_verification_expires_at?: true
    stripe_customer_id?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password_hash?: true
    cpf?: true
    crm?: true
    crm_uf?: true
    is_admin?: true
    is_email_verified?: true
    email_verification_token?: true
    email_verification_expires_at?: true
    stripe_customer_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin: boolean
    is_email_verified: boolean
    email_verification_token: string | null
    email_verification_expires_at: Date | null
    stripe_customer_id: string | null
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    cpf?: boolean
    crm?: boolean
    crm_uf?: boolean
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: boolean
    email_verification_expires_at?: boolean
    stripe_customer_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    templates?: boolean | User$templatesArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    audit_logs?: boolean | User$audit_logsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    cpf?: boolean
    crm?: boolean
    crm_uf?: boolean
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: boolean
    email_verification_expires_at?: boolean
    stripe_customer_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password_hash?: boolean
    cpf?: boolean
    crm?: boolean
    crm_uf?: boolean
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: boolean
    email_verification_expires_at?: boolean
    stripe_customer_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | User$subscriptionArgs<ExtArgs>
    templates?: boolean | User$templatesArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    audit_logs?: boolean | User$audit_logsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      subscription: Prisma.$SubscriptionPayload<ExtArgs> | null
      templates: Prisma.$TemplatePayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      audit_logs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password_hash: string
      cpf: string
      crm: string
      crm_uf: string
      is_admin: boolean
      is_email_verified: boolean
      email_verification_token: string | null
      email_verification_expires_at: Date | null
      stripe_customer_id: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscription<T extends User$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    templates<T extends User$templatesArgs<ExtArgs> = {}>(args?: Subset<T, User$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    audit_logs<T extends User$audit_logsArgs<ExtArgs> = {}>(args?: Subset<T, User$audit_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password_hash: FieldRef<"User", 'String'>
    readonly cpf: FieldRef<"User", 'String'>
    readonly crm: FieldRef<"User", 'String'>
    readonly crm_uf: FieldRef<"User", 'String'>
    readonly is_admin: FieldRef<"User", 'Boolean'>
    readonly is_email_verified: FieldRef<"User", 'Boolean'>
    readonly email_verification_token: FieldRef<"User", 'String'>
    readonly email_verification_expires_at: FieldRef<"User", 'DateTime'>
    readonly stripe_customer_id: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.subscription
   */
  export type User$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
  }

  /**
   * User.templates
   */
  export type User$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    cursor?: TemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.audit_logs
   */
  export type User$audit_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    stripe_subscription_id: string | null
    plan_type: string | null
    status: $Enums.SubscriptionStatus | null
    current_period_end: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    stripe_subscription_id: string | null
    plan_type: string | null
    status: $Enums.SubscriptionStatus | null
    current_period_end: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    user_id: number
    stripe_subscription_id: number
    plan_type: number
    status: number
    current_period_end: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    user_id?: true
    stripe_subscription_id?: true
    plan_type?: true
    status?: true
    current_period_end?: true
    created_at?: true
    updated_at?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    user_id?: true
    stripe_subscription_id?: true
    plan_type?: true
    status?: true
    current_period_end?: true
    created_at?: true
    updated_at?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    user_id?: true
    stripe_subscription_id?: true
    plan_type?: true
    status?: true
    current_period_end?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    user_id: string
    stripe_subscription_id: string
    plan_type: string
    status: $Enums.SubscriptionStatus
    current_period_end: Date
    created_at: Date
    updated_at: Date
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    stripe_subscription_id?: boolean
    plan_type?: boolean
    status?: boolean
    current_period_end?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    stripe_subscription_id?: boolean
    plan_type?: boolean
    status?: boolean
    current_period_end?: boolean
    created_at?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    user_id?: boolean
    stripe_subscription_id?: boolean
    plan_type?: boolean
    status?: boolean
    current_period_end?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      stripe_subscription_id: string
      plan_type: string
      status: $Enums.SubscriptionStatus
      current_period_end: Date
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */ 
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly user_id: FieldRef<"Subscription", 'String'>
    readonly stripe_subscription_id: FieldRef<"Subscription", 'String'>
    readonly plan_type: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'SubscriptionStatus'>
    readonly current_period_end: FieldRef<"Subscription", 'DateTime'>
    readonly created_at: FieldRef<"Subscription", 'DateTime'>
    readonly updated_at: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model TemplateCategory
   */

  export type AggregateTemplateCategory = {
    _count: TemplateCategoryCountAggregateOutputType | null
    _min: TemplateCategoryMinAggregateOutputType | null
    _max: TemplateCategoryMaxAggregateOutputType | null
  }

  export type TemplateCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type TemplateCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
  }

  export type TemplateCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    _all: number
  }


  export type TemplateCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type TemplateCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
  }

  export type TemplateCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    _all?: true
  }

  export type TemplateCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateCategory to aggregate.
     */
    where?: TemplateCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateCategories to fetch.
     */
    orderBy?: TemplateCategoryOrderByWithRelationInput | TemplateCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplateCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TemplateCategories
    **/
    _count?: true | TemplateCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateCategoryMaxAggregateInputType
  }

  export type GetTemplateCategoryAggregateType<T extends TemplateCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplateCategory[P]>
      : GetScalarType<T[P], AggregateTemplateCategory[P]>
  }




  export type TemplateCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateCategoryWhereInput
    orderBy?: TemplateCategoryOrderByWithAggregationInput | TemplateCategoryOrderByWithAggregationInput[]
    by: TemplateCategoryScalarFieldEnum[] | TemplateCategoryScalarFieldEnum
    having?: TemplateCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateCategoryCountAggregateInputType | true
    _min?: TemplateCategoryMinAggregateInputType
    _max?: TemplateCategoryMaxAggregateInputType
  }

  export type TemplateCategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    _count: TemplateCategoryCountAggregateOutputType | null
    _min: TemplateCategoryMinAggregateOutputType | null
    _max: TemplateCategoryMaxAggregateOutputType | null
  }

  type GetTemplateCategoryGroupByPayload<T extends TemplateCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplateCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateCategoryGroupByOutputType[P]>
        }
      >
    >


  export type TemplateCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    templates?: boolean | TemplateCategory$templatesArgs<ExtArgs>
    _count?: boolean | TemplateCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateCategory"]>

  export type TemplateCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["templateCategory"]>

  export type TemplateCategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
  }

  export type TemplateCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    templates?: boolean | TemplateCategory$templatesArgs<ExtArgs>
    _count?: boolean | TemplateCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TemplateCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TemplateCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TemplateCategory"
    objects: {
      templates: Prisma.$TemplatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
    }, ExtArgs["result"]["templateCategory"]>
    composites: {}
  }

  type TemplateCategoryGetPayload<S extends boolean | null | undefined | TemplateCategoryDefaultArgs> = $Result.GetResult<Prisma.$TemplateCategoryPayload, S>

  type TemplateCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TemplateCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TemplateCategoryCountAggregateInputType | true
    }

  export interface TemplateCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TemplateCategory'], meta: { name: 'TemplateCategory' } }
    /**
     * Find zero or one TemplateCategory that matches the filter.
     * @param {TemplateCategoryFindUniqueArgs} args - Arguments to find a TemplateCategory
     * @example
     * // Get one TemplateCategory
     * const templateCategory = await prisma.templateCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplateCategoryFindUniqueArgs>(args: SelectSubset<T, TemplateCategoryFindUniqueArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TemplateCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TemplateCategoryFindUniqueOrThrowArgs} args - Arguments to find a TemplateCategory
     * @example
     * // Get one TemplateCategory
     * const templateCategory = await prisma.templateCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplateCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplateCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TemplateCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCategoryFindFirstArgs} args - Arguments to find a TemplateCategory
     * @example
     * // Get one TemplateCategory
     * const templateCategory = await prisma.templateCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplateCategoryFindFirstArgs>(args?: SelectSubset<T, TemplateCategoryFindFirstArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TemplateCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCategoryFindFirstOrThrowArgs} args - Arguments to find a TemplateCategory
     * @example
     * // Get one TemplateCategory
     * const templateCategory = await prisma.templateCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplateCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplateCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TemplateCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TemplateCategories
     * const templateCategories = await prisma.templateCategory.findMany()
     * 
     * // Get first 10 TemplateCategories
     * const templateCategories = await prisma.templateCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateCategoryWithIdOnly = await prisma.templateCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TemplateCategoryFindManyArgs>(args?: SelectSubset<T, TemplateCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TemplateCategory.
     * @param {TemplateCategoryCreateArgs} args - Arguments to create a TemplateCategory.
     * @example
     * // Create one TemplateCategory
     * const TemplateCategory = await prisma.templateCategory.create({
     *   data: {
     *     // ... data to create a TemplateCategory
     *   }
     * })
     * 
     */
    create<T extends TemplateCategoryCreateArgs>(args: SelectSubset<T, TemplateCategoryCreateArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TemplateCategories.
     * @param {TemplateCategoryCreateManyArgs} args - Arguments to create many TemplateCategories.
     * @example
     * // Create many TemplateCategories
     * const templateCategory = await prisma.templateCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplateCategoryCreateManyArgs>(args?: SelectSubset<T, TemplateCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TemplateCategories and returns the data saved in the database.
     * @param {TemplateCategoryCreateManyAndReturnArgs} args - Arguments to create many TemplateCategories.
     * @example
     * // Create many TemplateCategories
     * const templateCategory = await prisma.templateCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TemplateCategories and only return the `id`
     * const templateCategoryWithIdOnly = await prisma.templateCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplateCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplateCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TemplateCategory.
     * @param {TemplateCategoryDeleteArgs} args - Arguments to delete one TemplateCategory.
     * @example
     * // Delete one TemplateCategory
     * const TemplateCategory = await prisma.templateCategory.delete({
     *   where: {
     *     // ... filter to delete one TemplateCategory
     *   }
     * })
     * 
     */
    delete<T extends TemplateCategoryDeleteArgs>(args: SelectSubset<T, TemplateCategoryDeleteArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TemplateCategory.
     * @param {TemplateCategoryUpdateArgs} args - Arguments to update one TemplateCategory.
     * @example
     * // Update one TemplateCategory
     * const templateCategory = await prisma.templateCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplateCategoryUpdateArgs>(args: SelectSubset<T, TemplateCategoryUpdateArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TemplateCategories.
     * @param {TemplateCategoryDeleteManyArgs} args - Arguments to filter TemplateCategories to delete.
     * @example
     * // Delete a few TemplateCategories
     * const { count } = await prisma.templateCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplateCategoryDeleteManyArgs>(args?: SelectSubset<T, TemplateCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TemplateCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TemplateCategories
     * const templateCategory = await prisma.templateCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplateCategoryUpdateManyArgs>(args: SelectSubset<T, TemplateCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TemplateCategory.
     * @param {TemplateCategoryUpsertArgs} args - Arguments to update or create a TemplateCategory.
     * @example
     * // Update or create a TemplateCategory
     * const templateCategory = await prisma.templateCategory.upsert({
     *   create: {
     *     // ... data to create a TemplateCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TemplateCategory we want to update
     *   }
     * })
     */
    upsert<T extends TemplateCategoryUpsertArgs>(args: SelectSubset<T, TemplateCategoryUpsertArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TemplateCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCategoryCountArgs} args - Arguments to filter TemplateCategories to count.
     * @example
     * // Count the number of TemplateCategories
     * const count = await prisma.templateCategory.count({
     *   where: {
     *     // ... the filter for the TemplateCategories we want to count
     *   }
     * })
    **/
    count<T extends TemplateCategoryCountArgs>(
      args?: Subset<T, TemplateCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TemplateCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateCategoryAggregateArgs>(args: Subset<T, TemplateCategoryAggregateArgs>): Prisma.PrismaPromise<GetTemplateCategoryAggregateType<T>>

    /**
     * Group by TemplateCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateCategoryGroupByArgs['orderBy'] }
        : { orderBy?: TemplateCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TemplateCategory model
   */
  readonly fields: TemplateCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TemplateCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplateCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    templates<T extends TemplateCategory$templatesArgs<ExtArgs> = {}>(args?: Subset<T, TemplateCategory$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TemplateCategory model
   */ 
  interface TemplateCategoryFieldRefs {
    readonly id: FieldRef<"TemplateCategory", 'String'>
    readonly name: FieldRef<"TemplateCategory", 'String'>
    readonly createdAt: FieldRef<"TemplateCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TemplateCategory findUnique
   */
  export type TemplateCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TemplateCategory to fetch.
     */
    where: TemplateCategoryWhereUniqueInput
  }

  /**
   * TemplateCategory findUniqueOrThrow
   */
  export type TemplateCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TemplateCategory to fetch.
     */
    where: TemplateCategoryWhereUniqueInput
  }

  /**
   * TemplateCategory findFirst
   */
  export type TemplateCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TemplateCategory to fetch.
     */
    where?: TemplateCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateCategories to fetch.
     */
    orderBy?: TemplateCategoryOrderByWithRelationInput | TemplateCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateCategories.
     */
    cursor?: TemplateCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateCategories.
     */
    distinct?: TemplateCategoryScalarFieldEnum | TemplateCategoryScalarFieldEnum[]
  }

  /**
   * TemplateCategory findFirstOrThrow
   */
  export type TemplateCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TemplateCategory to fetch.
     */
    where?: TemplateCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateCategories to fetch.
     */
    orderBy?: TemplateCategoryOrderByWithRelationInput | TemplateCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateCategories.
     */
    cursor?: TemplateCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateCategories.
     */
    distinct?: TemplateCategoryScalarFieldEnum | TemplateCategoryScalarFieldEnum[]
  }

  /**
   * TemplateCategory findMany
   */
  export type TemplateCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * Filter, which TemplateCategories to fetch.
     */
    where?: TemplateCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateCategories to fetch.
     */
    orderBy?: TemplateCategoryOrderByWithRelationInput | TemplateCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TemplateCategories.
     */
    cursor?: TemplateCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateCategories.
     */
    skip?: number
    distinct?: TemplateCategoryScalarFieldEnum | TemplateCategoryScalarFieldEnum[]
  }

  /**
   * TemplateCategory create
   */
  export type TemplateCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a TemplateCategory.
     */
    data: XOR<TemplateCategoryCreateInput, TemplateCategoryUncheckedCreateInput>
  }

  /**
   * TemplateCategory createMany
   */
  export type TemplateCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TemplateCategories.
     */
    data: TemplateCategoryCreateManyInput | TemplateCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TemplateCategory createManyAndReturn
   */
  export type TemplateCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TemplateCategories.
     */
    data: TemplateCategoryCreateManyInput | TemplateCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TemplateCategory update
   */
  export type TemplateCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a TemplateCategory.
     */
    data: XOR<TemplateCategoryUpdateInput, TemplateCategoryUncheckedUpdateInput>
    /**
     * Choose, which TemplateCategory to update.
     */
    where: TemplateCategoryWhereUniqueInput
  }

  /**
   * TemplateCategory updateMany
   */
  export type TemplateCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TemplateCategories.
     */
    data: XOR<TemplateCategoryUpdateManyMutationInput, TemplateCategoryUncheckedUpdateManyInput>
    /**
     * Filter which TemplateCategories to update
     */
    where?: TemplateCategoryWhereInput
  }

  /**
   * TemplateCategory upsert
   */
  export type TemplateCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the TemplateCategory to update in case it exists.
     */
    where: TemplateCategoryWhereUniqueInput
    /**
     * In case the TemplateCategory found by the `where` argument doesn't exist, create a new TemplateCategory with this data.
     */
    create: XOR<TemplateCategoryCreateInput, TemplateCategoryUncheckedCreateInput>
    /**
     * In case the TemplateCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplateCategoryUpdateInput, TemplateCategoryUncheckedUpdateInput>
  }

  /**
   * TemplateCategory delete
   */
  export type TemplateCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    /**
     * Filter which TemplateCategory to delete.
     */
    where: TemplateCategoryWhereUniqueInput
  }

  /**
   * TemplateCategory deleteMany
   */
  export type TemplateCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateCategories to delete
     */
    where?: TemplateCategoryWhereInput
  }

  /**
   * TemplateCategory.templates
   */
  export type TemplateCategory$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    cursor?: TemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * TemplateCategory without action
   */
  export type TemplateCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Template
   */

  export type AggregateTemplate = {
    _count: TemplateCountAggregateOutputType | null
    _min: TemplateMinAggregateOutputType | null
    _max: TemplateMaxAggregateOutputType | null
  }

  export type TemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    created_by_id: string | null
    category_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    created_by_id: string | null
    category_id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TemplateCountAggregateOutputType = {
    id: number
    name: number
    created_by_id: number
    category_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TemplateMinAggregateInputType = {
    id?: true
    name?: true
    created_by_id?: true
    category_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TemplateMaxAggregateInputType = {
    id?: true
    name?: true
    created_by_id?: true
    category_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TemplateCountAggregateInputType = {
    id?: true
    name?: true
    created_by_id?: true
    category_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Template to aggregate.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Templates
    **/
    _count?: true | TemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateMaxAggregateInputType
  }

  export type GetTemplateAggregateType<T extends TemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplate[P]>
      : GetScalarType<T[P], AggregateTemplate[P]>
  }




  export type TemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithAggregationInput | TemplateOrderByWithAggregationInput[]
    by: TemplateScalarFieldEnum[] | TemplateScalarFieldEnum
    having?: TemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateCountAggregateInputType | true
    _min?: TemplateMinAggregateInputType
    _max?: TemplateMaxAggregateInputType
  }

  export type TemplateGroupByOutputType = {
    id: string
    name: string
    created_by_id: string
    category_id: string | null
    createdAt: Date
    updatedAt: Date
    _count: TemplateCountAggregateOutputType | null
    _min: TemplateMinAggregateOutputType | null
    _max: TemplateMaxAggregateOutputType | null
  }

  type GetTemplateGroupByPayload<T extends TemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateGroupByOutputType[P]>
        }
      >
    >


  export type TemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_by_id?: boolean
    category_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    created_by?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | Template$categoryArgs<ExtArgs>
    sections?: boolean | Template$sectionsArgs<ExtArgs>
    actionRules?: boolean | Template$actionRulesArgs<ExtArgs>
    reports?: boolean | Template$reportsArgs<ExtArgs>
    _count?: boolean | TemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["template"]>

  export type TemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_by_id?: boolean
    category_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    created_by?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | Template$categoryArgs<ExtArgs>
  }, ExtArgs["result"]["template"]>

  export type TemplateSelectScalar = {
    id?: boolean
    name?: boolean
    created_by_id?: boolean
    category_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    created_by?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | Template$categoryArgs<ExtArgs>
    sections?: boolean | Template$sectionsArgs<ExtArgs>
    actionRules?: boolean | Template$actionRulesArgs<ExtArgs>
    reports?: boolean | Template$reportsArgs<ExtArgs>
    _count?: boolean | TemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    created_by?: boolean | UserDefaultArgs<ExtArgs>
    category?: boolean | Template$categoryArgs<ExtArgs>
  }

  export type $TemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Template"
    objects: {
      created_by: Prisma.$UserPayload<ExtArgs>
      category: Prisma.$TemplateCategoryPayload<ExtArgs> | null
      sections: Prisma.$TemplateSectionPayload<ExtArgs>[]
      actionRules: Prisma.$ActionRulePayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      created_by_id: string
      category_id: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["template"]>
    composites: {}
  }

  type TemplateGetPayload<S extends boolean | null | undefined | TemplateDefaultArgs> = $Result.GetResult<Prisma.$TemplatePayload, S>

  type TemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TemplateCountAggregateInputType | true
    }

  export interface TemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Template'], meta: { name: 'Template' } }
    /**
     * Find zero or one Template that matches the filter.
     * @param {TemplateFindUniqueArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplateFindUniqueArgs>(args: SelectSubset<T, TemplateFindUniqueArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Template that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TemplateFindUniqueOrThrowArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Template that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindFirstArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplateFindFirstArgs>(args?: SelectSubset<T, TemplateFindFirstArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Template that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindFirstOrThrowArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Templates
     * const templates = await prisma.template.findMany()
     * 
     * // Get first 10 Templates
     * const templates = await prisma.template.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateWithIdOnly = await prisma.template.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TemplateFindManyArgs>(args?: SelectSubset<T, TemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Template.
     * @param {TemplateCreateArgs} args - Arguments to create a Template.
     * @example
     * // Create one Template
     * const Template = await prisma.template.create({
     *   data: {
     *     // ... data to create a Template
     *   }
     * })
     * 
     */
    create<T extends TemplateCreateArgs>(args: SelectSubset<T, TemplateCreateArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Templates.
     * @param {TemplateCreateManyArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const template = await prisma.template.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplateCreateManyArgs>(args?: SelectSubset<T, TemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Templates and returns the data saved in the database.
     * @param {TemplateCreateManyAndReturnArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const template = await prisma.template.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Templates and only return the `id`
     * const templateWithIdOnly = await prisma.template.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Template.
     * @param {TemplateDeleteArgs} args - Arguments to delete one Template.
     * @example
     * // Delete one Template
     * const Template = await prisma.template.delete({
     *   where: {
     *     // ... filter to delete one Template
     *   }
     * })
     * 
     */
    delete<T extends TemplateDeleteArgs>(args: SelectSubset<T, TemplateDeleteArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Template.
     * @param {TemplateUpdateArgs} args - Arguments to update one Template.
     * @example
     * // Update one Template
     * const template = await prisma.template.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplateUpdateArgs>(args: SelectSubset<T, TemplateUpdateArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Templates.
     * @param {TemplateDeleteManyArgs} args - Arguments to filter Templates to delete.
     * @example
     * // Delete a few Templates
     * const { count } = await prisma.template.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplateDeleteManyArgs>(args?: SelectSubset<T, TemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Templates
     * const template = await prisma.template.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplateUpdateManyArgs>(args: SelectSubset<T, TemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Template.
     * @param {TemplateUpsertArgs} args - Arguments to update or create a Template.
     * @example
     * // Update or create a Template
     * const template = await prisma.template.upsert({
     *   create: {
     *     // ... data to create a Template
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Template we want to update
     *   }
     * })
     */
    upsert<T extends TemplateUpsertArgs>(args: SelectSubset<T, TemplateUpsertArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCountArgs} args - Arguments to filter Templates to count.
     * @example
     * // Count the number of Templates
     * const count = await prisma.template.count({
     *   where: {
     *     // ... the filter for the Templates we want to count
     *   }
     * })
    **/
    count<T extends TemplateCountArgs>(
      args?: Subset<T, TemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Template.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateAggregateArgs>(args: Subset<T, TemplateAggregateArgs>): Prisma.PrismaPromise<GetTemplateAggregateType<T>>

    /**
     * Group by Template.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateGroupByArgs['orderBy'] }
        : { orderBy?: TemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Template model
   */
  readonly fields: TemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Template.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    created_by<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    category<T extends Template$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Template$categoryArgs<ExtArgs>>): Prisma__TemplateCategoryClient<$Result.GetResult<Prisma.$TemplateCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sections<T extends Template$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, Template$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "findMany"> | Null>
    actionRules<T extends Template$actionRulesArgs<ExtArgs> = {}>(args?: Subset<T, Template$actionRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends Template$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Template$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Template model
   */ 
  interface TemplateFieldRefs {
    readonly id: FieldRef<"Template", 'String'>
    readonly name: FieldRef<"Template", 'String'>
    readonly created_by_id: FieldRef<"Template", 'String'>
    readonly category_id: FieldRef<"Template", 'String'>
    readonly createdAt: FieldRef<"Template", 'DateTime'>
    readonly updatedAt: FieldRef<"Template", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Template findUnique
   */
  export type TemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template findUniqueOrThrow
   */
  export type TemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template findFirst
   */
  export type TemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template findFirstOrThrow
   */
  export type TemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template findMany
   */
  export type TemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template create
   */
  export type TemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a Template.
     */
    data: XOR<TemplateCreateInput, TemplateUncheckedCreateInput>
  }

  /**
   * Template createMany
   */
  export type TemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Templates.
     */
    data: TemplateCreateManyInput | TemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Template createManyAndReturn
   */
  export type TemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Templates.
     */
    data: TemplateCreateManyInput | TemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Template update
   */
  export type TemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a Template.
     */
    data: XOR<TemplateUpdateInput, TemplateUncheckedUpdateInput>
    /**
     * Choose, which Template to update.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template updateMany
   */
  export type TemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Templates.
     */
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyInput>
    /**
     * Filter which Templates to update
     */
    where?: TemplateWhereInput
  }

  /**
   * Template upsert
   */
  export type TemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the Template to update in case it exists.
     */
    where: TemplateWhereUniqueInput
    /**
     * In case the Template found by the `where` argument doesn't exist, create a new Template with this data.
     */
    create: XOR<TemplateCreateInput, TemplateUncheckedCreateInput>
    /**
     * In case the Template was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplateUpdateInput, TemplateUncheckedUpdateInput>
  }

  /**
   * Template delete
   */
  export type TemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter which Template to delete.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template deleteMany
   */
  export type TemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Templates to delete
     */
    where?: TemplateWhereInput
  }

  /**
   * Template.category
   */
  export type Template$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateCategory
     */
    select?: TemplateCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateCategoryInclude<ExtArgs> | null
    where?: TemplateCategoryWhereInput
  }

  /**
   * Template.sections
   */
  export type Template$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    where?: TemplateSectionWhereInput
    orderBy?: TemplateSectionOrderByWithRelationInput | TemplateSectionOrderByWithRelationInput[]
    cursor?: TemplateSectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateSectionScalarFieldEnum | TemplateSectionScalarFieldEnum[]
  }

  /**
   * Template.actionRules
   */
  export type Template$actionRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    where?: ActionRuleWhereInput
    orderBy?: ActionRuleOrderByWithRelationInput | ActionRuleOrderByWithRelationInput[]
    cursor?: ActionRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionRuleScalarFieldEnum | ActionRuleScalarFieldEnum[]
  }

  /**
   * Template.reports
   */
  export type Template$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Template without action
   */
  export type TemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
  }


  /**
   * Model TemplateSection
   */

  export type AggregateTemplateSection = {
    _count: TemplateSectionCountAggregateOutputType | null
    _avg: TemplateSectionAvgAggregateOutputType | null
    _sum: TemplateSectionSumAggregateOutputType | null
    _min: TemplateSectionMinAggregateOutputType | null
    _max: TemplateSectionMaxAggregateOutputType | null
  }

  export type TemplateSectionAvgAggregateOutputType = {
    display_order: number | null
  }

  export type TemplateSectionSumAggregateOutputType = {
    display_order: number | null
  }

  export type TemplateSectionMinAggregateOutputType = {
    id: string | null
    template_id: string | null
    title: string | null
    default_text: string | null
    display_order: number | null
    createdAt: Date | null
  }

  export type TemplateSectionMaxAggregateOutputType = {
    id: string | null
    template_id: string | null
    title: string | null
    default_text: string | null
    display_order: number | null
    createdAt: Date | null
  }

  export type TemplateSectionCountAggregateOutputType = {
    id: number
    template_id: number
    title: number
    default_text: number
    display_order: number
    content: number
    createdAt: number
    _all: number
  }


  export type TemplateSectionAvgAggregateInputType = {
    display_order?: true
  }

  export type TemplateSectionSumAggregateInputType = {
    display_order?: true
  }

  export type TemplateSectionMinAggregateInputType = {
    id?: true
    template_id?: true
    title?: true
    default_text?: true
    display_order?: true
    createdAt?: true
  }

  export type TemplateSectionMaxAggregateInputType = {
    id?: true
    template_id?: true
    title?: true
    default_text?: true
    display_order?: true
    createdAt?: true
  }

  export type TemplateSectionCountAggregateInputType = {
    id?: true
    template_id?: true
    title?: true
    default_text?: true
    display_order?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type TemplateSectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateSection to aggregate.
     */
    where?: TemplateSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateSections to fetch.
     */
    orderBy?: TemplateSectionOrderByWithRelationInput | TemplateSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplateSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateSections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TemplateSections
    **/
    _count?: true | TemplateSectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemplateSectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemplateSectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateSectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateSectionMaxAggregateInputType
  }

  export type GetTemplateSectionAggregateType<T extends TemplateSectionAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplateSection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplateSection[P]>
      : GetScalarType<T[P], AggregateTemplateSection[P]>
  }




  export type TemplateSectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateSectionWhereInput
    orderBy?: TemplateSectionOrderByWithAggregationInput | TemplateSectionOrderByWithAggregationInput[]
    by: TemplateSectionScalarFieldEnum[] | TemplateSectionScalarFieldEnum
    having?: TemplateSectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateSectionCountAggregateInputType | true
    _avg?: TemplateSectionAvgAggregateInputType
    _sum?: TemplateSectionSumAggregateInputType
    _min?: TemplateSectionMinAggregateInputType
    _max?: TemplateSectionMaxAggregateInputType
  }

  export type TemplateSectionGroupByOutputType = {
    id: string
    template_id: string
    title: string
    default_text: string | null
    display_order: number
    content: JsonValue | null
    createdAt: Date
    _count: TemplateSectionCountAggregateOutputType | null
    _avg: TemplateSectionAvgAggregateOutputType | null
    _sum: TemplateSectionSumAggregateOutputType | null
    _min: TemplateSectionMinAggregateOutputType | null
    _max: TemplateSectionMaxAggregateOutputType | null
  }

  type GetTemplateSectionGroupByPayload<T extends TemplateSectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplateSectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateSectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateSectionGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateSectionGroupByOutputType[P]>
        }
      >
    >


  export type TemplateSectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    template_id?: boolean
    title?: boolean
    default_text?: boolean
    display_order?: boolean
    content?: boolean
    createdAt?: boolean
    template?: boolean | TemplateDefaultArgs<ExtArgs>
    reportData?: boolean | TemplateSection$reportDataArgs<ExtArgs>
    _count?: boolean | TemplateSectionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateSection"]>

  export type TemplateSectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    template_id?: boolean
    title?: boolean
    default_text?: boolean
    display_order?: boolean
    content?: boolean
    createdAt?: boolean
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateSection"]>

  export type TemplateSectionSelectScalar = {
    id?: boolean
    template_id?: boolean
    title?: boolean
    default_text?: boolean
    display_order?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type TemplateSectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | TemplateDefaultArgs<ExtArgs>
    reportData?: boolean | TemplateSection$reportDataArgs<ExtArgs>
    _count?: boolean | TemplateSectionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TemplateSectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }

  export type $TemplateSectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TemplateSection"
    objects: {
      template: Prisma.$TemplatePayload<ExtArgs>
      reportData: Prisma.$ReportDataPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      template_id: string
      title: string
      default_text: string | null
      display_order: number
      content: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["templateSection"]>
    composites: {}
  }

  type TemplateSectionGetPayload<S extends boolean | null | undefined | TemplateSectionDefaultArgs> = $Result.GetResult<Prisma.$TemplateSectionPayload, S>

  type TemplateSectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TemplateSectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TemplateSectionCountAggregateInputType | true
    }

  export interface TemplateSectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TemplateSection'], meta: { name: 'TemplateSection' } }
    /**
     * Find zero or one TemplateSection that matches the filter.
     * @param {TemplateSectionFindUniqueArgs} args - Arguments to find a TemplateSection
     * @example
     * // Get one TemplateSection
     * const templateSection = await prisma.templateSection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplateSectionFindUniqueArgs>(args: SelectSubset<T, TemplateSectionFindUniqueArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TemplateSection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TemplateSectionFindUniqueOrThrowArgs} args - Arguments to find a TemplateSection
     * @example
     * // Get one TemplateSection
     * const templateSection = await prisma.templateSection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplateSectionFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplateSectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TemplateSection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateSectionFindFirstArgs} args - Arguments to find a TemplateSection
     * @example
     * // Get one TemplateSection
     * const templateSection = await prisma.templateSection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplateSectionFindFirstArgs>(args?: SelectSubset<T, TemplateSectionFindFirstArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TemplateSection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateSectionFindFirstOrThrowArgs} args - Arguments to find a TemplateSection
     * @example
     * // Get one TemplateSection
     * const templateSection = await prisma.templateSection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplateSectionFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplateSectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TemplateSections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateSectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TemplateSections
     * const templateSections = await prisma.templateSection.findMany()
     * 
     * // Get first 10 TemplateSections
     * const templateSections = await prisma.templateSection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateSectionWithIdOnly = await prisma.templateSection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TemplateSectionFindManyArgs>(args?: SelectSubset<T, TemplateSectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TemplateSection.
     * @param {TemplateSectionCreateArgs} args - Arguments to create a TemplateSection.
     * @example
     * // Create one TemplateSection
     * const TemplateSection = await prisma.templateSection.create({
     *   data: {
     *     // ... data to create a TemplateSection
     *   }
     * })
     * 
     */
    create<T extends TemplateSectionCreateArgs>(args: SelectSubset<T, TemplateSectionCreateArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TemplateSections.
     * @param {TemplateSectionCreateManyArgs} args - Arguments to create many TemplateSections.
     * @example
     * // Create many TemplateSections
     * const templateSection = await prisma.templateSection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplateSectionCreateManyArgs>(args?: SelectSubset<T, TemplateSectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TemplateSections and returns the data saved in the database.
     * @param {TemplateSectionCreateManyAndReturnArgs} args - Arguments to create many TemplateSections.
     * @example
     * // Create many TemplateSections
     * const templateSection = await prisma.templateSection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TemplateSections and only return the `id`
     * const templateSectionWithIdOnly = await prisma.templateSection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplateSectionCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplateSectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TemplateSection.
     * @param {TemplateSectionDeleteArgs} args - Arguments to delete one TemplateSection.
     * @example
     * // Delete one TemplateSection
     * const TemplateSection = await prisma.templateSection.delete({
     *   where: {
     *     // ... filter to delete one TemplateSection
     *   }
     * })
     * 
     */
    delete<T extends TemplateSectionDeleteArgs>(args: SelectSubset<T, TemplateSectionDeleteArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TemplateSection.
     * @param {TemplateSectionUpdateArgs} args - Arguments to update one TemplateSection.
     * @example
     * // Update one TemplateSection
     * const templateSection = await prisma.templateSection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplateSectionUpdateArgs>(args: SelectSubset<T, TemplateSectionUpdateArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TemplateSections.
     * @param {TemplateSectionDeleteManyArgs} args - Arguments to filter TemplateSections to delete.
     * @example
     * // Delete a few TemplateSections
     * const { count } = await prisma.templateSection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplateSectionDeleteManyArgs>(args?: SelectSubset<T, TemplateSectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TemplateSections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateSectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TemplateSections
     * const templateSection = await prisma.templateSection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplateSectionUpdateManyArgs>(args: SelectSubset<T, TemplateSectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TemplateSection.
     * @param {TemplateSectionUpsertArgs} args - Arguments to update or create a TemplateSection.
     * @example
     * // Update or create a TemplateSection
     * const templateSection = await prisma.templateSection.upsert({
     *   create: {
     *     // ... data to create a TemplateSection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TemplateSection we want to update
     *   }
     * })
     */
    upsert<T extends TemplateSectionUpsertArgs>(args: SelectSubset<T, TemplateSectionUpsertArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TemplateSections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateSectionCountArgs} args - Arguments to filter TemplateSections to count.
     * @example
     * // Count the number of TemplateSections
     * const count = await prisma.templateSection.count({
     *   where: {
     *     // ... the filter for the TemplateSections we want to count
     *   }
     * })
    **/
    count<T extends TemplateSectionCountArgs>(
      args?: Subset<T, TemplateSectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateSectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TemplateSection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateSectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateSectionAggregateArgs>(args: Subset<T, TemplateSectionAggregateArgs>): Prisma.PrismaPromise<GetTemplateSectionAggregateType<T>>

    /**
     * Group by TemplateSection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateSectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateSectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateSectionGroupByArgs['orderBy'] }
        : { orderBy?: TemplateSectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateSectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateSectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TemplateSection model
   */
  readonly fields: TemplateSectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TemplateSection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplateSectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends TemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TemplateDefaultArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reportData<T extends TemplateSection$reportDataArgs<ExtArgs> = {}>(args?: Subset<T, TemplateSection$reportDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TemplateSection model
   */ 
  interface TemplateSectionFieldRefs {
    readonly id: FieldRef<"TemplateSection", 'String'>
    readonly template_id: FieldRef<"TemplateSection", 'String'>
    readonly title: FieldRef<"TemplateSection", 'String'>
    readonly default_text: FieldRef<"TemplateSection", 'String'>
    readonly display_order: FieldRef<"TemplateSection", 'Int'>
    readonly content: FieldRef<"TemplateSection", 'Json'>
    readonly createdAt: FieldRef<"TemplateSection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TemplateSection findUnique
   */
  export type TemplateSectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * Filter, which TemplateSection to fetch.
     */
    where: TemplateSectionWhereUniqueInput
  }

  /**
   * TemplateSection findUniqueOrThrow
   */
  export type TemplateSectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * Filter, which TemplateSection to fetch.
     */
    where: TemplateSectionWhereUniqueInput
  }

  /**
   * TemplateSection findFirst
   */
  export type TemplateSectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * Filter, which TemplateSection to fetch.
     */
    where?: TemplateSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateSections to fetch.
     */
    orderBy?: TemplateSectionOrderByWithRelationInput | TemplateSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateSections.
     */
    cursor?: TemplateSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateSections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateSections.
     */
    distinct?: TemplateSectionScalarFieldEnum | TemplateSectionScalarFieldEnum[]
  }

  /**
   * TemplateSection findFirstOrThrow
   */
  export type TemplateSectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * Filter, which TemplateSection to fetch.
     */
    where?: TemplateSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateSections to fetch.
     */
    orderBy?: TemplateSectionOrderByWithRelationInput | TemplateSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateSections.
     */
    cursor?: TemplateSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateSections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateSections.
     */
    distinct?: TemplateSectionScalarFieldEnum | TemplateSectionScalarFieldEnum[]
  }

  /**
   * TemplateSection findMany
   */
  export type TemplateSectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * Filter, which TemplateSections to fetch.
     */
    where?: TemplateSectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateSections to fetch.
     */
    orderBy?: TemplateSectionOrderByWithRelationInput | TemplateSectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TemplateSections.
     */
    cursor?: TemplateSectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateSections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateSections.
     */
    skip?: number
    distinct?: TemplateSectionScalarFieldEnum | TemplateSectionScalarFieldEnum[]
  }

  /**
   * TemplateSection create
   */
  export type TemplateSectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * The data needed to create a TemplateSection.
     */
    data: XOR<TemplateSectionCreateInput, TemplateSectionUncheckedCreateInput>
  }

  /**
   * TemplateSection createMany
   */
  export type TemplateSectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TemplateSections.
     */
    data: TemplateSectionCreateManyInput | TemplateSectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TemplateSection createManyAndReturn
   */
  export type TemplateSectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TemplateSections.
     */
    data: TemplateSectionCreateManyInput | TemplateSectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TemplateSection update
   */
  export type TemplateSectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * The data needed to update a TemplateSection.
     */
    data: XOR<TemplateSectionUpdateInput, TemplateSectionUncheckedUpdateInput>
    /**
     * Choose, which TemplateSection to update.
     */
    where: TemplateSectionWhereUniqueInput
  }

  /**
   * TemplateSection updateMany
   */
  export type TemplateSectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TemplateSections.
     */
    data: XOR<TemplateSectionUpdateManyMutationInput, TemplateSectionUncheckedUpdateManyInput>
    /**
     * Filter which TemplateSections to update
     */
    where?: TemplateSectionWhereInput
  }

  /**
   * TemplateSection upsert
   */
  export type TemplateSectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * The filter to search for the TemplateSection to update in case it exists.
     */
    where: TemplateSectionWhereUniqueInput
    /**
     * In case the TemplateSection found by the `where` argument doesn't exist, create a new TemplateSection with this data.
     */
    create: XOR<TemplateSectionCreateInput, TemplateSectionUncheckedCreateInput>
    /**
     * In case the TemplateSection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplateSectionUpdateInput, TemplateSectionUncheckedUpdateInput>
  }

  /**
   * TemplateSection delete
   */
  export type TemplateSectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
    /**
     * Filter which TemplateSection to delete.
     */
    where: TemplateSectionWhereUniqueInput
  }

  /**
   * TemplateSection deleteMany
   */
  export type TemplateSectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateSections to delete
     */
    where?: TemplateSectionWhereInput
  }

  /**
   * TemplateSection.reportData
   */
  export type TemplateSection$reportDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    where?: ReportDataWhereInput
    orderBy?: ReportDataOrderByWithRelationInput | ReportDataOrderByWithRelationInput[]
    cursor?: ReportDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportDataScalarFieldEnum | ReportDataScalarFieldEnum[]
  }

  /**
   * TemplateSection without action
   */
  export type TemplateSectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateSection
     */
    select?: TemplateSectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateSectionInclude<ExtArgs> | null
  }


  /**
   * Model ActionRule
   */

  export type AggregateActionRule = {
    _count: ActionRuleCountAggregateOutputType | null
    _min: ActionRuleMinAggregateOutputType | null
    _max: ActionRuleMaxAggregateOutputType | null
  }

  export type ActionRuleMinAggregateOutputType = {
    id: string | null
    template_id: string | null
    source_action_id: string | null
    target_section_id: string | null
    action_text: string | null
    createdAt: Date | null
  }

  export type ActionRuleMaxAggregateOutputType = {
    id: string | null
    template_id: string | null
    source_action_id: string | null
    target_section_id: string | null
    action_text: string | null
    createdAt: Date | null
  }

  export type ActionRuleCountAggregateOutputType = {
    id: number
    template_id: number
    source_action_id: number
    target_section_id: number
    action_text: number
    createdAt: number
    _all: number
  }


  export type ActionRuleMinAggregateInputType = {
    id?: true
    template_id?: true
    source_action_id?: true
    target_section_id?: true
    action_text?: true
    createdAt?: true
  }

  export type ActionRuleMaxAggregateInputType = {
    id?: true
    template_id?: true
    source_action_id?: true
    target_section_id?: true
    action_text?: true
    createdAt?: true
  }

  export type ActionRuleCountAggregateInputType = {
    id?: true
    template_id?: true
    source_action_id?: true
    target_section_id?: true
    action_text?: true
    createdAt?: true
    _all?: true
  }

  export type ActionRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionRule to aggregate.
     */
    where?: ActionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionRules to fetch.
     */
    orderBy?: ActionRuleOrderByWithRelationInput | ActionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActionRules
    **/
    _count?: true | ActionRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionRuleMaxAggregateInputType
  }

  export type GetActionRuleAggregateType<T extends ActionRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateActionRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActionRule[P]>
      : GetScalarType<T[P], AggregateActionRule[P]>
  }




  export type ActionRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionRuleWhereInput
    orderBy?: ActionRuleOrderByWithAggregationInput | ActionRuleOrderByWithAggregationInput[]
    by: ActionRuleScalarFieldEnum[] | ActionRuleScalarFieldEnum
    having?: ActionRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionRuleCountAggregateInputType | true
    _min?: ActionRuleMinAggregateInputType
    _max?: ActionRuleMaxAggregateInputType
  }

  export type ActionRuleGroupByOutputType = {
    id: string
    template_id: string
    source_action_id: string
    target_section_id: string
    action_text: string
    createdAt: Date
    _count: ActionRuleCountAggregateOutputType | null
    _min: ActionRuleMinAggregateOutputType | null
    _max: ActionRuleMaxAggregateOutputType | null
  }

  type GetActionRuleGroupByPayload<T extends ActionRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActionRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionRuleGroupByOutputType[P]>
            : GetScalarType<T[P], ActionRuleGroupByOutputType[P]>
        }
      >
    >


  export type ActionRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    template_id?: boolean
    source_action_id?: boolean
    target_section_id?: boolean
    action_text?: boolean
    createdAt?: boolean
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionRule"]>

  export type ActionRuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    template_id?: boolean
    source_action_id?: boolean
    target_section_id?: boolean
    action_text?: boolean
    createdAt?: boolean
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionRule"]>

  export type ActionRuleSelectScalar = {
    id?: boolean
    template_id?: boolean
    source_action_id?: boolean
    target_section_id?: boolean
    action_text?: boolean
    createdAt?: boolean
  }

  export type ActionRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }
  export type ActionRuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }

  export type $ActionRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActionRule"
    objects: {
      template: Prisma.$TemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      template_id: string
      source_action_id: string
      target_section_id: string
      action_text: string
      createdAt: Date
    }, ExtArgs["result"]["actionRule"]>
    composites: {}
  }

  type ActionRuleGetPayload<S extends boolean | null | undefined | ActionRuleDefaultArgs> = $Result.GetResult<Prisma.$ActionRulePayload, S>

  type ActionRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActionRuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActionRuleCountAggregateInputType | true
    }

  export interface ActionRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActionRule'], meta: { name: 'ActionRule' } }
    /**
     * Find zero or one ActionRule that matches the filter.
     * @param {ActionRuleFindUniqueArgs} args - Arguments to find a ActionRule
     * @example
     * // Get one ActionRule
     * const actionRule = await prisma.actionRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActionRuleFindUniqueArgs>(args: SelectSubset<T, ActionRuleFindUniqueArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActionRule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActionRuleFindUniqueOrThrowArgs} args - Arguments to find a ActionRule
     * @example
     * // Get one ActionRule
     * const actionRule = await prisma.actionRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActionRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, ActionRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActionRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionRuleFindFirstArgs} args - Arguments to find a ActionRule
     * @example
     * // Get one ActionRule
     * const actionRule = await prisma.actionRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActionRuleFindFirstArgs>(args?: SelectSubset<T, ActionRuleFindFirstArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActionRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionRuleFindFirstOrThrowArgs} args - Arguments to find a ActionRule
     * @example
     * // Get one ActionRule
     * const actionRule = await prisma.actionRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActionRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, ActionRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActionRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActionRules
     * const actionRules = await prisma.actionRule.findMany()
     * 
     * // Get first 10 ActionRules
     * const actionRules = await prisma.actionRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionRuleWithIdOnly = await prisma.actionRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActionRuleFindManyArgs>(args?: SelectSubset<T, ActionRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActionRule.
     * @param {ActionRuleCreateArgs} args - Arguments to create a ActionRule.
     * @example
     * // Create one ActionRule
     * const ActionRule = await prisma.actionRule.create({
     *   data: {
     *     // ... data to create a ActionRule
     *   }
     * })
     * 
     */
    create<T extends ActionRuleCreateArgs>(args: SelectSubset<T, ActionRuleCreateArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActionRules.
     * @param {ActionRuleCreateManyArgs} args - Arguments to create many ActionRules.
     * @example
     * // Create many ActionRules
     * const actionRule = await prisma.actionRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActionRuleCreateManyArgs>(args?: SelectSubset<T, ActionRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActionRules and returns the data saved in the database.
     * @param {ActionRuleCreateManyAndReturnArgs} args - Arguments to create many ActionRules.
     * @example
     * // Create many ActionRules
     * const actionRule = await prisma.actionRule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActionRules and only return the `id`
     * const actionRuleWithIdOnly = await prisma.actionRule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActionRuleCreateManyAndReturnArgs>(args?: SelectSubset<T, ActionRuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ActionRule.
     * @param {ActionRuleDeleteArgs} args - Arguments to delete one ActionRule.
     * @example
     * // Delete one ActionRule
     * const ActionRule = await prisma.actionRule.delete({
     *   where: {
     *     // ... filter to delete one ActionRule
     *   }
     * })
     * 
     */
    delete<T extends ActionRuleDeleteArgs>(args: SelectSubset<T, ActionRuleDeleteArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActionRule.
     * @param {ActionRuleUpdateArgs} args - Arguments to update one ActionRule.
     * @example
     * // Update one ActionRule
     * const actionRule = await prisma.actionRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActionRuleUpdateArgs>(args: SelectSubset<T, ActionRuleUpdateArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActionRules.
     * @param {ActionRuleDeleteManyArgs} args - Arguments to filter ActionRules to delete.
     * @example
     * // Delete a few ActionRules
     * const { count } = await prisma.actionRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActionRuleDeleteManyArgs>(args?: SelectSubset<T, ActionRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActionRules
     * const actionRule = await prisma.actionRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActionRuleUpdateManyArgs>(args: SelectSubset<T, ActionRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActionRule.
     * @param {ActionRuleUpsertArgs} args - Arguments to update or create a ActionRule.
     * @example
     * // Update or create a ActionRule
     * const actionRule = await prisma.actionRule.upsert({
     *   create: {
     *     // ... data to create a ActionRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActionRule we want to update
     *   }
     * })
     */
    upsert<T extends ActionRuleUpsertArgs>(args: SelectSubset<T, ActionRuleUpsertArgs<ExtArgs>>): Prisma__ActionRuleClient<$Result.GetResult<Prisma.$ActionRulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActionRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionRuleCountArgs} args - Arguments to filter ActionRules to count.
     * @example
     * // Count the number of ActionRules
     * const count = await prisma.actionRule.count({
     *   where: {
     *     // ... the filter for the ActionRules we want to count
     *   }
     * })
    **/
    count<T extends ActionRuleCountArgs>(
      args?: Subset<T, ActionRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActionRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionRuleAggregateArgs>(args: Subset<T, ActionRuleAggregateArgs>): Prisma.PrismaPromise<GetActionRuleAggregateType<T>>

    /**
     * Group by ActionRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionRuleGroupByArgs['orderBy'] }
        : { orderBy?: ActionRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActionRule model
   */
  readonly fields: ActionRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActionRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActionRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends TemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TemplateDefaultArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActionRule model
   */ 
  interface ActionRuleFieldRefs {
    readonly id: FieldRef<"ActionRule", 'String'>
    readonly template_id: FieldRef<"ActionRule", 'String'>
    readonly source_action_id: FieldRef<"ActionRule", 'String'>
    readonly target_section_id: FieldRef<"ActionRule", 'String'>
    readonly action_text: FieldRef<"ActionRule", 'String'>
    readonly createdAt: FieldRef<"ActionRule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActionRule findUnique
   */
  export type ActionRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * Filter, which ActionRule to fetch.
     */
    where: ActionRuleWhereUniqueInput
  }

  /**
   * ActionRule findUniqueOrThrow
   */
  export type ActionRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * Filter, which ActionRule to fetch.
     */
    where: ActionRuleWhereUniqueInput
  }

  /**
   * ActionRule findFirst
   */
  export type ActionRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * Filter, which ActionRule to fetch.
     */
    where?: ActionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionRules to fetch.
     */
    orderBy?: ActionRuleOrderByWithRelationInput | ActionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionRules.
     */
    cursor?: ActionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionRules.
     */
    distinct?: ActionRuleScalarFieldEnum | ActionRuleScalarFieldEnum[]
  }

  /**
   * ActionRule findFirstOrThrow
   */
  export type ActionRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * Filter, which ActionRule to fetch.
     */
    where?: ActionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionRules to fetch.
     */
    orderBy?: ActionRuleOrderByWithRelationInput | ActionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionRules.
     */
    cursor?: ActionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionRules.
     */
    distinct?: ActionRuleScalarFieldEnum | ActionRuleScalarFieldEnum[]
  }

  /**
   * ActionRule findMany
   */
  export type ActionRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * Filter, which ActionRules to fetch.
     */
    where?: ActionRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionRules to fetch.
     */
    orderBy?: ActionRuleOrderByWithRelationInput | ActionRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActionRules.
     */
    cursor?: ActionRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionRules.
     */
    skip?: number
    distinct?: ActionRuleScalarFieldEnum | ActionRuleScalarFieldEnum[]
  }

  /**
   * ActionRule create
   */
  export type ActionRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a ActionRule.
     */
    data: XOR<ActionRuleCreateInput, ActionRuleUncheckedCreateInput>
  }

  /**
   * ActionRule createMany
   */
  export type ActionRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActionRules.
     */
    data: ActionRuleCreateManyInput | ActionRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActionRule createManyAndReturn
   */
  export type ActionRuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ActionRules.
     */
    data: ActionRuleCreateManyInput | ActionRuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActionRule update
   */
  export type ActionRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a ActionRule.
     */
    data: XOR<ActionRuleUpdateInput, ActionRuleUncheckedUpdateInput>
    /**
     * Choose, which ActionRule to update.
     */
    where: ActionRuleWhereUniqueInput
  }

  /**
   * ActionRule updateMany
   */
  export type ActionRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActionRules.
     */
    data: XOR<ActionRuleUpdateManyMutationInput, ActionRuleUncheckedUpdateManyInput>
    /**
     * Filter which ActionRules to update
     */
    where?: ActionRuleWhereInput
  }

  /**
   * ActionRule upsert
   */
  export type ActionRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the ActionRule to update in case it exists.
     */
    where: ActionRuleWhereUniqueInput
    /**
     * In case the ActionRule found by the `where` argument doesn't exist, create a new ActionRule with this data.
     */
    create: XOR<ActionRuleCreateInput, ActionRuleUncheckedCreateInput>
    /**
     * In case the ActionRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionRuleUpdateInput, ActionRuleUncheckedUpdateInput>
  }

  /**
   * ActionRule delete
   */
  export type ActionRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
    /**
     * Filter which ActionRule to delete.
     */
    where: ActionRuleWhereUniqueInput
  }

  /**
   * ActionRule deleteMany
   */
  export type ActionRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionRules to delete
     */
    where?: ActionRuleWhereInput
  }

  /**
   * ActionRule without action
   */
  export type ActionRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionRule
     */
    select?: ActionRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionRuleInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    template_id: string | null
    status: string | null
    pdf_url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    template_id: string | null
    status: string | null
    pdf_url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    user_id: number
    template_id: number
    status: number
    pdf_url: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReportMinAggregateInputType = {
    id?: true
    user_id?: true
    template_id?: true
    status?: true
    pdf_url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    user_id?: true
    template_id?: true
    status?: true
    pdf_url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    user_id?: true
    template_id?: true
    status?: true
    pdf_url?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    user_id: string
    template_id: string
    status: string
    pdf_url: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReportCountAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    template_id?: boolean
    status?: boolean
    pdf_url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | TemplateDefaultArgs<ExtArgs>
    reportData?: boolean | Report$reportDataArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    template_id?: boolean
    status?: boolean
    pdf_url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    user_id?: boolean
    template_id?: boolean
    status?: boolean
    pdf_url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | TemplateDefaultArgs<ExtArgs>
    reportData?: boolean | Report$reportDataArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    template?: boolean | TemplateDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      template: Prisma.$TemplatePayload<ExtArgs>
      reportData: Prisma.$ReportDataPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      template_id: string
      status: string
      pdf_url: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    template<T extends TemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TemplateDefaultArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reportData<T extends Report$reportDataArgs<ExtArgs> = {}>(args?: Subset<T, Report$reportDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly user_id: FieldRef<"Report", 'String'>
    readonly template_id: FieldRef<"Report", 'String'>
    readonly status: FieldRef<"Report", 'String'>
    readonly pdf_url: FieldRef<"Report", 'String'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }

  /**
   * Report.reportData
   */
  export type Report$reportDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    where?: ReportDataWhereInput
    orderBy?: ReportDataOrderByWithRelationInput | ReportDataOrderByWithRelationInput[]
    cursor?: ReportDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportDataScalarFieldEnum | ReportDataScalarFieldEnum[]
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model ReportData
   */

  export type AggregateReportData = {
    _count: ReportDataCountAggregateOutputType | null
    _min: ReportDataMinAggregateOutputType | null
    _max: ReportDataMaxAggregateOutputType | null
  }

  export type ReportDataMinAggregateOutputType = {
    id: string | null
    report_id: string | null
    section_id: string | null
    content: string | null
  }

  export type ReportDataMaxAggregateOutputType = {
    id: string | null
    report_id: string | null
    section_id: string | null
    content: string | null
  }

  export type ReportDataCountAggregateOutputType = {
    id: number
    report_id: number
    section_id: number
    content: number
    _all: number
  }


  export type ReportDataMinAggregateInputType = {
    id?: true
    report_id?: true
    section_id?: true
    content?: true
  }

  export type ReportDataMaxAggregateInputType = {
    id?: true
    report_id?: true
    section_id?: true
    content?: true
  }

  export type ReportDataCountAggregateInputType = {
    id?: true
    report_id?: true
    section_id?: true
    content?: true
    _all?: true
  }

  export type ReportDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportData to aggregate.
     */
    where?: ReportDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportData to fetch.
     */
    orderBy?: ReportDataOrderByWithRelationInput | ReportDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportData
    **/
    _count?: true | ReportDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportDataMaxAggregateInputType
  }

  export type GetReportDataAggregateType<T extends ReportDataAggregateArgs> = {
        [P in keyof T & keyof AggregateReportData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportData[P]>
      : GetScalarType<T[P], AggregateReportData[P]>
  }




  export type ReportDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportDataWhereInput
    orderBy?: ReportDataOrderByWithAggregationInput | ReportDataOrderByWithAggregationInput[]
    by: ReportDataScalarFieldEnum[] | ReportDataScalarFieldEnum
    having?: ReportDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportDataCountAggregateInputType | true
    _min?: ReportDataMinAggregateInputType
    _max?: ReportDataMaxAggregateInputType
  }

  export type ReportDataGroupByOutputType = {
    id: string
    report_id: string
    section_id: string
    content: string | null
    _count: ReportDataCountAggregateOutputType | null
    _min: ReportDataMinAggregateOutputType | null
    _max: ReportDataMaxAggregateOutputType | null
  }

  type GetReportDataGroupByPayload<T extends ReportDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportDataGroupByOutputType[P]>
            : GetScalarType<T[P], ReportDataGroupByOutputType[P]>
        }
      >
    >


  export type ReportDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    report_id?: boolean
    section_id?: boolean
    content?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    section?: boolean | TemplateSectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportData"]>

  export type ReportDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    report_id?: boolean
    section_id?: boolean
    content?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    section?: boolean | TemplateSectionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportData"]>

  export type ReportDataSelectScalar = {
    id?: boolean
    report_id?: boolean
    section_id?: boolean
    content?: boolean
  }

  export type ReportDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    section?: boolean | TemplateSectionDefaultArgs<ExtArgs>
  }
  export type ReportDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    section?: boolean | TemplateSectionDefaultArgs<ExtArgs>
  }

  export type $ReportDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportData"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs>
      section: Prisma.$TemplateSectionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      report_id: string
      section_id: string
      content: string | null
    }, ExtArgs["result"]["reportData"]>
    composites: {}
  }

  type ReportDataGetPayload<S extends boolean | null | undefined | ReportDataDefaultArgs> = $Result.GetResult<Prisma.$ReportDataPayload, S>

  type ReportDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportDataCountAggregateInputType | true
    }

  export interface ReportDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportData'], meta: { name: 'ReportData' } }
    /**
     * Find zero or one ReportData that matches the filter.
     * @param {ReportDataFindUniqueArgs} args - Arguments to find a ReportData
     * @example
     * // Get one ReportData
     * const reportData = await prisma.reportData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportDataFindUniqueArgs>(args: SelectSubset<T, ReportDataFindUniqueArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ReportData that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportDataFindUniqueOrThrowArgs} args - Arguments to find a ReportData
     * @example
     * // Get one ReportData
     * const reportData = await prisma.reportData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportDataFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ReportData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDataFindFirstArgs} args - Arguments to find a ReportData
     * @example
     * // Get one ReportData
     * const reportData = await prisma.reportData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportDataFindFirstArgs>(args?: SelectSubset<T, ReportDataFindFirstArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ReportData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDataFindFirstOrThrowArgs} args - Arguments to find a ReportData
     * @example
     * // Get one ReportData
     * const reportData = await prisma.reportData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportDataFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ReportData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportData
     * const reportData = await prisma.reportData.findMany()
     * 
     * // Get first 10 ReportData
     * const reportData = await prisma.reportData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportDataWithIdOnly = await prisma.reportData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportDataFindManyArgs>(args?: SelectSubset<T, ReportDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ReportData.
     * @param {ReportDataCreateArgs} args - Arguments to create a ReportData.
     * @example
     * // Create one ReportData
     * const ReportData = await prisma.reportData.create({
     *   data: {
     *     // ... data to create a ReportData
     *   }
     * })
     * 
     */
    create<T extends ReportDataCreateArgs>(args: SelectSubset<T, ReportDataCreateArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ReportData.
     * @param {ReportDataCreateManyArgs} args - Arguments to create many ReportData.
     * @example
     * // Create many ReportData
     * const reportData = await prisma.reportData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportDataCreateManyArgs>(args?: SelectSubset<T, ReportDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportData and returns the data saved in the database.
     * @param {ReportDataCreateManyAndReturnArgs} args - Arguments to create many ReportData.
     * @example
     * // Create many ReportData
     * const reportData = await prisma.reportData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportData and only return the `id`
     * const reportDataWithIdOnly = await prisma.reportData.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportDataCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ReportData.
     * @param {ReportDataDeleteArgs} args - Arguments to delete one ReportData.
     * @example
     * // Delete one ReportData
     * const ReportData = await prisma.reportData.delete({
     *   where: {
     *     // ... filter to delete one ReportData
     *   }
     * })
     * 
     */
    delete<T extends ReportDataDeleteArgs>(args: SelectSubset<T, ReportDataDeleteArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ReportData.
     * @param {ReportDataUpdateArgs} args - Arguments to update one ReportData.
     * @example
     * // Update one ReportData
     * const reportData = await prisma.reportData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportDataUpdateArgs>(args: SelectSubset<T, ReportDataUpdateArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ReportData.
     * @param {ReportDataDeleteManyArgs} args - Arguments to filter ReportData to delete.
     * @example
     * // Delete a few ReportData
     * const { count } = await prisma.reportData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDataDeleteManyArgs>(args?: SelectSubset<T, ReportDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportData
     * const reportData = await prisma.reportData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportDataUpdateManyArgs>(args: SelectSubset<T, ReportDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReportData.
     * @param {ReportDataUpsertArgs} args - Arguments to update or create a ReportData.
     * @example
     * // Update or create a ReportData
     * const reportData = await prisma.reportData.upsert({
     *   create: {
     *     // ... data to create a ReportData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportData we want to update
     *   }
     * })
     */
    upsert<T extends ReportDataUpsertArgs>(args: SelectSubset<T, ReportDataUpsertArgs<ExtArgs>>): Prisma__ReportDataClient<$Result.GetResult<Prisma.$ReportDataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ReportData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDataCountArgs} args - Arguments to filter ReportData to count.
     * @example
     * // Count the number of ReportData
     * const count = await prisma.reportData.count({
     *   where: {
     *     // ... the filter for the ReportData we want to count
     *   }
     * })
    **/
    count<T extends ReportDataCountArgs>(
      args?: Subset<T, ReportDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportDataAggregateArgs>(args: Subset<T, ReportDataAggregateArgs>): Prisma.PrismaPromise<GetReportDataAggregateType<T>>

    /**
     * Group by ReportData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportDataGroupByArgs['orderBy'] }
        : { orderBy?: ReportDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportData model
   */
  readonly fields: ReportDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    section<T extends TemplateSectionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TemplateSectionDefaultArgs<ExtArgs>>): Prisma__TemplateSectionClient<$Result.GetResult<Prisma.$TemplateSectionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportData model
   */ 
  interface ReportDataFieldRefs {
    readonly id: FieldRef<"ReportData", 'String'>
    readonly report_id: FieldRef<"ReportData", 'String'>
    readonly section_id: FieldRef<"ReportData", 'String'>
    readonly content: FieldRef<"ReportData", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportData findUnique
   */
  export type ReportDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * Filter, which ReportData to fetch.
     */
    where: ReportDataWhereUniqueInput
  }

  /**
   * ReportData findUniqueOrThrow
   */
  export type ReportDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * Filter, which ReportData to fetch.
     */
    where: ReportDataWhereUniqueInput
  }

  /**
   * ReportData findFirst
   */
  export type ReportDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * Filter, which ReportData to fetch.
     */
    where?: ReportDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportData to fetch.
     */
    orderBy?: ReportDataOrderByWithRelationInput | ReportDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportData.
     */
    cursor?: ReportDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportData.
     */
    distinct?: ReportDataScalarFieldEnum | ReportDataScalarFieldEnum[]
  }

  /**
   * ReportData findFirstOrThrow
   */
  export type ReportDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * Filter, which ReportData to fetch.
     */
    where?: ReportDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportData to fetch.
     */
    orderBy?: ReportDataOrderByWithRelationInput | ReportDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportData.
     */
    cursor?: ReportDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportData.
     */
    distinct?: ReportDataScalarFieldEnum | ReportDataScalarFieldEnum[]
  }

  /**
   * ReportData findMany
   */
  export type ReportDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * Filter, which ReportData to fetch.
     */
    where?: ReportDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportData to fetch.
     */
    orderBy?: ReportDataOrderByWithRelationInput | ReportDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportData.
     */
    cursor?: ReportDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportData.
     */
    skip?: number
    distinct?: ReportDataScalarFieldEnum | ReportDataScalarFieldEnum[]
  }

  /**
   * ReportData create
   */
  export type ReportDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportData.
     */
    data: XOR<ReportDataCreateInput, ReportDataUncheckedCreateInput>
  }

  /**
   * ReportData createMany
   */
  export type ReportDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportData.
     */
    data: ReportDataCreateManyInput | ReportDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportData createManyAndReturn
   */
  export type ReportDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ReportData.
     */
    data: ReportDataCreateManyInput | ReportDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportData update
   */
  export type ReportDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportData.
     */
    data: XOR<ReportDataUpdateInput, ReportDataUncheckedUpdateInput>
    /**
     * Choose, which ReportData to update.
     */
    where: ReportDataWhereUniqueInput
  }

  /**
   * ReportData updateMany
   */
  export type ReportDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportData.
     */
    data: XOR<ReportDataUpdateManyMutationInput, ReportDataUncheckedUpdateManyInput>
    /**
     * Filter which ReportData to update
     */
    where?: ReportDataWhereInput
  }

  /**
   * ReportData upsert
   */
  export type ReportDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportData to update in case it exists.
     */
    where: ReportDataWhereUniqueInput
    /**
     * In case the ReportData found by the `where` argument doesn't exist, create a new ReportData with this data.
     */
    create: XOR<ReportDataCreateInput, ReportDataUncheckedCreateInput>
    /**
     * In case the ReportData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportDataUpdateInput, ReportDataUncheckedUpdateInput>
  }

  /**
   * ReportData delete
   */
  export type ReportDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
    /**
     * Filter which ReportData to delete.
     */
    where: ReportDataWhereUniqueInput
  }

  /**
   * ReportData deleteMany
   */
  export type ReportDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportData to delete
     */
    where?: ReportDataWhereInput
  }

  /**
   * ReportData without action
   */
  export type ReportDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportData
     */
    select?: ReportDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportDataInclude<ExtArgs> | null
  }


  /**
   * Model Letterhead
   */

  export type AggregateLetterhead = {
    _count: LetterheadCountAggregateOutputType | null
    _min: LetterheadMinAggregateOutputType | null
    _max: LetterheadMaxAggregateOutputType | null
  }

  export type LetterheadMinAggregateOutputType = {
    id: string | null
    name: string | null
    header_image_url: string | null
    footer_image_url: string | null
    createdAt: Date | null
  }

  export type LetterheadMaxAggregateOutputType = {
    id: string | null
    name: string | null
    header_image_url: string | null
    footer_image_url: string | null
    createdAt: Date | null
  }

  export type LetterheadCountAggregateOutputType = {
    id: number
    name: number
    header_image_url: number
    footer_image_url: number
    createdAt: number
    _all: number
  }


  export type LetterheadMinAggregateInputType = {
    id?: true
    name?: true
    header_image_url?: true
    footer_image_url?: true
    createdAt?: true
  }

  export type LetterheadMaxAggregateInputType = {
    id?: true
    name?: true
    header_image_url?: true
    footer_image_url?: true
    createdAt?: true
  }

  export type LetterheadCountAggregateInputType = {
    id?: true
    name?: true
    header_image_url?: true
    footer_image_url?: true
    createdAt?: true
    _all?: true
  }

  export type LetterheadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Letterhead to aggregate.
     */
    where?: LetterheadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letterheads to fetch.
     */
    orderBy?: LetterheadOrderByWithRelationInput | LetterheadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LetterheadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letterheads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letterheads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Letterheads
    **/
    _count?: true | LetterheadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LetterheadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LetterheadMaxAggregateInputType
  }

  export type GetLetterheadAggregateType<T extends LetterheadAggregateArgs> = {
        [P in keyof T & keyof AggregateLetterhead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLetterhead[P]>
      : GetScalarType<T[P], AggregateLetterhead[P]>
  }




  export type LetterheadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LetterheadWhereInput
    orderBy?: LetterheadOrderByWithAggregationInput | LetterheadOrderByWithAggregationInput[]
    by: LetterheadScalarFieldEnum[] | LetterheadScalarFieldEnum
    having?: LetterheadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LetterheadCountAggregateInputType | true
    _min?: LetterheadMinAggregateInputType
    _max?: LetterheadMaxAggregateInputType
  }

  export type LetterheadGroupByOutputType = {
    id: string
    name: string
    header_image_url: string | null
    footer_image_url: string | null
    createdAt: Date
    _count: LetterheadCountAggregateOutputType | null
    _min: LetterheadMinAggregateOutputType | null
    _max: LetterheadMaxAggregateOutputType | null
  }

  type GetLetterheadGroupByPayload<T extends LetterheadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LetterheadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LetterheadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LetterheadGroupByOutputType[P]>
            : GetScalarType<T[P], LetterheadGroupByOutputType[P]>
        }
      >
    >


  export type LetterheadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    header_image_url?: boolean
    footer_image_url?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["letterhead"]>

  export type LetterheadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    header_image_url?: boolean
    footer_image_url?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["letterhead"]>

  export type LetterheadSelectScalar = {
    id?: boolean
    name?: boolean
    header_image_url?: boolean
    footer_image_url?: boolean
    createdAt?: boolean
  }


  export type $LetterheadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Letterhead"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      header_image_url: string | null
      footer_image_url: string | null
      createdAt: Date
    }, ExtArgs["result"]["letterhead"]>
    composites: {}
  }

  type LetterheadGetPayload<S extends boolean | null | undefined | LetterheadDefaultArgs> = $Result.GetResult<Prisma.$LetterheadPayload, S>

  type LetterheadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LetterheadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LetterheadCountAggregateInputType | true
    }

  export interface LetterheadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Letterhead'], meta: { name: 'Letterhead' } }
    /**
     * Find zero or one Letterhead that matches the filter.
     * @param {LetterheadFindUniqueArgs} args - Arguments to find a Letterhead
     * @example
     * // Get one Letterhead
     * const letterhead = await prisma.letterhead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LetterheadFindUniqueArgs>(args: SelectSubset<T, LetterheadFindUniqueArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Letterhead that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LetterheadFindUniqueOrThrowArgs} args - Arguments to find a Letterhead
     * @example
     * // Get one Letterhead
     * const letterhead = await prisma.letterhead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LetterheadFindUniqueOrThrowArgs>(args: SelectSubset<T, LetterheadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Letterhead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterheadFindFirstArgs} args - Arguments to find a Letterhead
     * @example
     * // Get one Letterhead
     * const letterhead = await prisma.letterhead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LetterheadFindFirstArgs>(args?: SelectSubset<T, LetterheadFindFirstArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Letterhead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterheadFindFirstOrThrowArgs} args - Arguments to find a Letterhead
     * @example
     * // Get one Letterhead
     * const letterhead = await prisma.letterhead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LetterheadFindFirstOrThrowArgs>(args?: SelectSubset<T, LetterheadFindFirstOrThrowArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Letterheads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterheadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Letterheads
     * const letterheads = await prisma.letterhead.findMany()
     * 
     * // Get first 10 Letterheads
     * const letterheads = await prisma.letterhead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const letterheadWithIdOnly = await prisma.letterhead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LetterheadFindManyArgs>(args?: SelectSubset<T, LetterheadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Letterhead.
     * @param {LetterheadCreateArgs} args - Arguments to create a Letterhead.
     * @example
     * // Create one Letterhead
     * const Letterhead = await prisma.letterhead.create({
     *   data: {
     *     // ... data to create a Letterhead
     *   }
     * })
     * 
     */
    create<T extends LetterheadCreateArgs>(args: SelectSubset<T, LetterheadCreateArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Letterheads.
     * @param {LetterheadCreateManyArgs} args - Arguments to create many Letterheads.
     * @example
     * // Create many Letterheads
     * const letterhead = await prisma.letterhead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LetterheadCreateManyArgs>(args?: SelectSubset<T, LetterheadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Letterheads and returns the data saved in the database.
     * @param {LetterheadCreateManyAndReturnArgs} args - Arguments to create many Letterheads.
     * @example
     * // Create many Letterheads
     * const letterhead = await prisma.letterhead.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Letterheads and only return the `id`
     * const letterheadWithIdOnly = await prisma.letterhead.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LetterheadCreateManyAndReturnArgs>(args?: SelectSubset<T, LetterheadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Letterhead.
     * @param {LetterheadDeleteArgs} args - Arguments to delete one Letterhead.
     * @example
     * // Delete one Letterhead
     * const Letterhead = await prisma.letterhead.delete({
     *   where: {
     *     // ... filter to delete one Letterhead
     *   }
     * })
     * 
     */
    delete<T extends LetterheadDeleteArgs>(args: SelectSubset<T, LetterheadDeleteArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Letterhead.
     * @param {LetterheadUpdateArgs} args - Arguments to update one Letterhead.
     * @example
     * // Update one Letterhead
     * const letterhead = await prisma.letterhead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LetterheadUpdateArgs>(args: SelectSubset<T, LetterheadUpdateArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Letterheads.
     * @param {LetterheadDeleteManyArgs} args - Arguments to filter Letterheads to delete.
     * @example
     * // Delete a few Letterheads
     * const { count } = await prisma.letterhead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LetterheadDeleteManyArgs>(args?: SelectSubset<T, LetterheadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Letterheads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterheadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Letterheads
     * const letterhead = await prisma.letterhead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LetterheadUpdateManyArgs>(args: SelectSubset<T, LetterheadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Letterhead.
     * @param {LetterheadUpsertArgs} args - Arguments to update or create a Letterhead.
     * @example
     * // Update or create a Letterhead
     * const letterhead = await prisma.letterhead.upsert({
     *   create: {
     *     // ... data to create a Letterhead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Letterhead we want to update
     *   }
     * })
     */
    upsert<T extends LetterheadUpsertArgs>(args: SelectSubset<T, LetterheadUpsertArgs<ExtArgs>>): Prisma__LetterheadClient<$Result.GetResult<Prisma.$LetterheadPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Letterheads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterheadCountArgs} args - Arguments to filter Letterheads to count.
     * @example
     * // Count the number of Letterheads
     * const count = await prisma.letterhead.count({
     *   where: {
     *     // ... the filter for the Letterheads we want to count
     *   }
     * })
    **/
    count<T extends LetterheadCountArgs>(
      args?: Subset<T, LetterheadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LetterheadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Letterhead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterheadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LetterheadAggregateArgs>(args: Subset<T, LetterheadAggregateArgs>): Prisma.PrismaPromise<GetLetterheadAggregateType<T>>

    /**
     * Group by Letterhead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LetterheadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LetterheadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LetterheadGroupByArgs['orderBy'] }
        : { orderBy?: LetterheadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LetterheadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLetterheadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Letterhead model
   */
  readonly fields: LetterheadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Letterhead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LetterheadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Letterhead model
   */ 
  interface LetterheadFieldRefs {
    readonly id: FieldRef<"Letterhead", 'String'>
    readonly name: FieldRef<"Letterhead", 'String'>
    readonly header_image_url: FieldRef<"Letterhead", 'String'>
    readonly footer_image_url: FieldRef<"Letterhead", 'String'>
    readonly createdAt: FieldRef<"Letterhead", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Letterhead findUnique
   */
  export type LetterheadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * Filter, which Letterhead to fetch.
     */
    where: LetterheadWhereUniqueInput
  }

  /**
   * Letterhead findUniqueOrThrow
   */
  export type LetterheadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * Filter, which Letterhead to fetch.
     */
    where: LetterheadWhereUniqueInput
  }

  /**
   * Letterhead findFirst
   */
  export type LetterheadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * Filter, which Letterhead to fetch.
     */
    where?: LetterheadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letterheads to fetch.
     */
    orderBy?: LetterheadOrderByWithRelationInput | LetterheadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Letterheads.
     */
    cursor?: LetterheadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letterheads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letterheads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Letterheads.
     */
    distinct?: LetterheadScalarFieldEnum | LetterheadScalarFieldEnum[]
  }

  /**
   * Letterhead findFirstOrThrow
   */
  export type LetterheadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * Filter, which Letterhead to fetch.
     */
    where?: LetterheadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letterheads to fetch.
     */
    orderBy?: LetterheadOrderByWithRelationInput | LetterheadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Letterheads.
     */
    cursor?: LetterheadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letterheads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letterheads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Letterheads.
     */
    distinct?: LetterheadScalarFieldEnum | LetterheadScalarFieldEnum[]
  }

  /**
   * Letterhead findMany
   */
  export type LetterheadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * Filter, which Letterheads to fetch.
     */
    where?: LetterheadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Letterheads to fetch.
     */
    orderBy?: LetterheadOrderByWithRelationInput | LetterheadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Letterheads.
     */
    cursor?: LetterheadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Letterheads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Letterheads.
     */
    skip?: number
    distinct?: LetterheadScalarFieldEnum | LetterheadScalarFieldEnum[]
  }

  /**
   * Letterhead create
   */
  export type LetterheadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * The data needed to create a Letterhead.
     */
    data: XOR<LetterheadCreateInput, LetterheadUncheckedCreateInput>
  }

  /**
   * Letterhead createMany
   */
  export type LetterheadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Letterheads.
     */
    data: LetterheadCreateManyInput | LetterheadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Letterhead createManyAndReturn
   */
  export type LetterheadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Letterheads.
     */
    data: LetterheadCreateManyInput | LetterheadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Letterhead update
   */
  export type LetterheadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * The data needed to update a Letterhead.
     */
    data: XOR<LetterheadUpdateInput, LetterheadUncheckedUpdateInput>
    /**
     * Choose, which Letterhead to update.
     */
    where: LetterheadWhereUniqueInput
  }

  /**
   * Letterhead updateMany
   */
  export type LetterheadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Letterheads.
     */
    data: XOR<LetterheadUpdateManyMutationInput, LetterheadUncheckedUpdateManyInput>
    /**
     * Filter which Letterheads to update
     */
    where?: LetterheadWhereInput
  }

  /**
   * Letterhead upsert
   */
  export type LetterheadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * The filter to search for the Letterhead to update in case it exists.
     */
    where: LetterheadWhereUniqueInput
    /**
     * In case the Letterhead found by the `where` argument doesn't exist, create a new Letterhead with this data.
     */
    create: XOR<LetterheadCreateInput, LetterheadUncheckedCreateInput>
    /**
     * In case the Letterhead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LetterheadUpdateInput, LetterheadUncheckedUpdateInput>
  }

  /**
   * Letterhead delete
   */
  export type LetterheadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
    /**
     * Filter which Letterhead to delete.
     */
    where: LetterheadWhereUniqueInput
  }

  /**
   * Letterhead deleteMany
   */
  export type LetterheadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Letterheads to delete
     */
    where?: LetterheadWhereInput
  }

  /**
   * Letterhead without action
   */
  export type LetterheadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Letterhead
     */
    select?: LetterheadSelect<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: bigint | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: bigint | null
    user_id: string | null
    action: string | null
    target_resource_id: string | null
    target_resource_type: string | null
    ip_address: string | null
    user_agent: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: bigint | null
    user_id: string | null
    action: string | null
    target_resource_id: string | null
    target_resource_type: string | null
    ip_address: string | null
    user_agent: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    user_id: number
    action: number
    target_resource_id: number
    target_resource_type: number
    ip_address: number
    user_agent: number
    data_snapshot: number
    timestamp: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    user_id?: true
    action?: true
    target_resource_id?: true
    target_resource_type?: true
    ip_address?: true
    user_agent?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    user_id?: true
    action?: true
    target_resource_id?: true
    target_resource_type?: true
    ip_address?: true
    user_agent?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    user_id?: true
    action?: true
    target_resource_id?: true
    target_resource_type?: true
    ip_address?: true
    user_agent?: true
    data_snapshot?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: bigint
    user_id: string
    action: string
    target_resource_id: string | null
    target_resource_type: string | null
    ip_address: string | null
    user_agent: string | null
    data_snapshot: JsonValue | null
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    action?: boolean
    target_resource_id?: boolean
    target_resource_type?: boolean
    ip_address?: boolean
    user_agent?: boolean
    data_snapshot?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    action?: boolean
    target_resource_id?: boolean
    target_resource_type?: boolean
    ip_address?: boolean
    user_agent?: boolean
    data_snapshot?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    user_id?: boolean
    action?: boolean
    target_resource_id?: boolean
    target_resource_type?: boolean
    ip_address?: boolean
    user_agent?: boolean
    data_snapshot?: boolean
    timestamp?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      user_id: string
      action: string
      target_resource_id: string | null
      target_resource_type: string | null
      ip_address: string | null
      user_agent: string | null
      data_snapshot: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'BigInt'>
    readonly user_id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly target_resource_id: FieldRef<"AuditLog", 'String'>
    readonly target_resource_type: FieldRef<"AuditLog", 'String'>
    readonly ip_address: FieldRef<"AuditLog", 'String'>
    readonly user_agent: FieldRef<"AuditLog", 'String'>
    readonly data_snapshot: FieldRef<"AuditLog", 'Json'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password_hash: 'password_hash',
    cpf: 'cpf',
    crm: 'crm',
    crm_uf: 'crm_uf',
    is_admin: 'is_admin',
    is_email_verified: 'is_email_verified',
    email_verification_token: 'email_verification_token',
    email_verification_expires_at: 'email_verification_expires_at',
    stripe_customer_id: 'stripe_customer_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    stripe_subscription_id: 'stripe_subscription_id',
    plan_type: 'plan_type',
    status: 'status',
    current_period_end: 'current_period_end',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const TemplateCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt'
  };

  export type TemplateCategoryScalarFieldEnum = (typeof TemplateCategoryScalarFieldEnum)[keyof typeof TemplateCategoryScalarFieldEnum]


  export const TemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_by_id: 'created_by_id',
    category_id: 'category_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TemplateScalarFieldEnum = (typeof TemplateScalarFieldEnum)[keyof typeof TemplateScalarFieldEnum]


  export const TemplateSectionScalarFieldEnum: {
    id: 'id',
    template_id: 'template_id',
    title: 'title',
    default_text: 'default_text',
    display_order: 'display_order',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type TemplateSectionScalarFieldEnum = (typeof TemplateSectionScalarFieldEnum)[keyof typeof TemplateSectionScalarFieldEnum]


  export const ActionRuleScalarFieldEnum: {
    id: 'id',
    template_id: 'template_id',
    source_action_id: 'source_action_id',
    target_section_id: 'target_section_id',
    action_text: 'action_text',
    createdAt: 'createdAt'
  };

  export type ActionRuleScalarFieldEnum = (typeof ActionRuleScalarFieldEnum)[keyof typeof ActionRuleScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    template_id: 'template_id',
    status: 'status',
    pdf_url: 'pdf_url',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const ReportDataScalarFieldEnum: {
    id: 'id',
    report_id: 'report_id',
    section_id: 'section_id',
    content: 'content'
  };

  export type ReportDataScalarFieldEnum = (typeof ReportDataScalarFieldEnum)[keyof typeof ReportDataScalarFieldEnum]


  export const LetterheadScalarFieldEnum: {
    id: 'id',
    name: 'name',
    header_image_url: 'header_image_url',
    footer_image_url: 'footer_image_url',
    createdAt: 'createdAt'
  };

  export type LetterheadScalarFieldEnum = (typeof LetterheadScalarFieldEnum)[keyof typeof LetterheadScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    action: 'action',
    target_resource_id: 'target_resource_id',
    target_resource_type: 'target_resource_type',
    ip_address: 'ip_address',
    user_agent: 'user_agent',
    data_snapshot: 'data_snapshot',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    crm?: StringFilter<"User"> | string
    crm_uf?: StringFilter<"User"> | string
    is_admin?: BoolFilter<"User"> | boolean
    is_email_verified?: BoolFilter<"User"> | boolean
    email_verification_token?: StringNullableFilter<"User"> | string | null
    email_verification_expires_at?: DateTimeNullableFilter<"User"> | Date | string | null
    stripe_customer_id?: StringNullableFilter<"User"> | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    subscription?: XOR<SubscriptionNullableRelationFilter, SubscriptionWhereInput> | null
    templates?: TemplateListRelationFilter
    reports?: ReportListRelationFilter
    audit_logs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    cpf?: SortOrder
    crm?: SortOrder
    crm_uf?: SortOrder
    is_admin?: SortOrder
    is_email_verified?: SortOrder
    email_verification_token?: SortOrderInput | SortOrder
    email_verification_expires_at?: SortOrderInput | SortOrder
    stripe_customer_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    subscription?: SubscriptionOrderByWithRelationInput
    templates?: TemplateOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    audit_logs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    cpf?: string
    email_verification_token?: string
    stripe_customer_id?: string
    crm_crm_uf?: UserCrmCrm_ufCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password_hash?: StringFilter<"User"> | string
    crm?: StringFilter<"User"> | string
    crm_uf?: StringFilter<"User"> | string
    is_admin?: BoolFilter<"User"> | boolean
    is_email_verified?: BoolFilter<"User"> | boolean
    email_verification_expires_at?: DateTimeNullableFilter<"User"> | Date | string | null
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    subscription?: XOR<SubscriptionNullableRelationFilter, SubscriptionWhereInput> | null
    templates?: TemplateListRelationFilter
    reports?: ReportListRelationFilter
    audit_logs?: AuditLogListRelationFilter
  }, "id" | "email" | "cpf" | "email_verification_token" | "stripe_customer_id" | "crm_crm_uf">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    cpf?: SortOrder
    crm?: SortOrder
    crm_uf?: SortOrder
    is_admin?: SortOrder
    is_email_verified?: SortOrder
    email_verification_token?: SortOrderInput | SortOrder
    email_verification_expires_at?: SortOrderInput | SortOrder
    stripe_customer_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password_hash?: StringWithAggregatesFilter<"User"> | string
    cpf?: StringWithAggregatesFilter<"User"> | string
    crm?: StringWithAggregatesFilter<"User"> | string
    crm_uf?: StringWithAggregatesFilter<"User"> | string
    is_admin?: BoolWithAggregatesFilter<"User"> | boolean
    is_email_verified?: BoolWithAggregatesFilter<"User"> | boolean
    email_verification_token?: StringNullableWithAggregatesFilter<"User"> | string | null
    email_verification_expires_at?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    stripe_customer_id?: StringNullableWithAggregatesFilter<"User"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    user_id?: StringFilter<"Subscription"> | string
    stripe_subscription_id?: StringFilter<"Subscription"> | string
    plan_type?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFilter<"Subscription"> | Date | string
    created_at?: DateTimeFilter<"Subscription"> | Date | string
    updated_at?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_subscription_id?: SortOrder
    plan_type?: SortOrder
    status?: SortOrder
    current_period_end?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    user_id?: string
    stripe_subscription_id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    plan_type?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFilter<"Subscription"> | Date | string
    created_at?: DateTimeFilter<"Subscription"> | Date | string
    updated_at?: DateTimeFilter<"Subscription"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id" | "stripe_subscription_id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_subscription_id?: SortOrder
    plan_type?: SortOrder
    status?: SortOrder
    current_period_end?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    user_id?: StringWithAggregatesFilter<"Subscription"> | string
    stripe_subscription_id?: StringWithAggregatesFilter<"Subscription"> | string
    plan_type?: StringWithAggregatesFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusWithAggregatesFilter<"Subscription"> | $Enums.SubscriptionStatus
    current_period_end?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type TemplateCategoryWhereInput = {
    AND?: TemplateCategoryWhereInput | TemplateCategoryWhereInput[]
    OR?: TemplateCategoryWhereInput[]
    NOT?: TemplateCategoryWhereInput | TemplateCategoryWhereInput[]
    id?: StringFilter<"TemplateCategory"> | string
    name?: StringFilter<"TemplateCategory"> | string
    createdAt?: DateTimeFilter<"TemplateCategory"> | Date | string
    templates?: TemplateListRelationFilter
  }

  export type TemplateCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    templates?: TemplateOrderByRelationAggregateInput
  }

  export type TemplateCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TemplateCategoryWhereInput | TemplateCategoryWhereInput[]
    OR?: TemplateCategoryWhereInput[]
    NOT?: TemplateCategoryWhereInput | TemplateCategoryWhereInput[]
    createdAt?: DateTimeFilter<"TemplateCategory"> | Date | string
    templates?: TemplateListRelationFilter
  }, "id" | "name">

  export type TemplateCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    _count?: TemplateCategoryCountOrderByAggregateInput
    _max?: TemplateCategoryMaxOrderByAggregateInput
    _min?: TemplateCategoryMinOrderByAggregateInput
  }

  export type TemplateCategoryScalarWhereWithAggregatesInput = {
    AND?: TemplateCategoryScalarWhereWithAggregatesInput | TemplateCategoryScalarWhereWithAggregatesInput[]
    OR?: TemplateCategoryScalarWhereWithAggregatesInput[]
    NOT?: TemplateCategoryScalarWhereWithAggregatesInput | TemplateCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TemplateCategory"> | string
    name?: StringWithAggregatesFilter<"TemplateCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TemplateCategory"> | Date | string
  }

  export type TemplateWhereInput = {
    AND?: TemplateWhereInput | TemplateWhereInput[]
    OR?: TemplateWhereInput[]
    NOT?: TemplateWhereInput | TemplateWhereInput[]
    id?: StringFilter<"Template"> | string
    name?: StringFilter<"Template"> | string
    created_by_id?: StringFilter<"Template"> | string
    category_id?: StringNullableFilter<"Template"> | string | null
    createdAt?: DateTimeFilter<"Template"> | Date | string
    updatedAt?: DateTimeFilter<"Template"> | Date | string
    created_by?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<TemplateCategoryNullableRelationFilter, TemplateCategoryWhereInput> | null
    sections?: TemplateSectionListRelationFilter
    actionRules?: ActionRuleListRelationFilter
    reports?: ReportListRelationFilter
  }

  export type TemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_by_id?: SortOrder
    category_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    created_by?: UserOrderByWithRelationInput
    category?: TemplateCategoryOrderByWithRelationInput
    sections?: TemplateSectionOrderByRelationAggregateInput
    actionRules?: ActionRuleOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type TemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TemplateWhereInput | TemplateWhereInput[]
    OR?: TemplateWhereInput[]
    NOT?: TemplateWhereInput | TemplateWhereInput[]
    name?: StringFilter<"Template"> | string
    created_by_id?: StringFilter<"Template"> | string
    category_id?: StringNullableFilter<"Template"> | string | null
    createdAt?: DateTimeFilter<"Template"> | Date | string
    updatedAt?: DateTimeFilter<"Template"> | Date | string
    created_by?: XOR<UserRelationFilter, UserWhereInput>
    category?: XOR<TemplateCategoryNullableRelationFilter, TemplateCategoryWhereInput> | null
    sections?: TemplateSectionListRelationFilter
    actionRules?: ActionRuleListRelationFilter
    reports?: ReportListRelationFilter
  }, "id">

  export type TemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_by_id?: SortOrder
    category_id?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TemplateCountOrderByAggregateInput
    _max?: TemplateMaxOrderByAggregateInput
    _min?: TemplateMinOrderByAggregateInput
  }

  export type TemplateScalarWhereWithAggregatesInput = {
    AND?: TemplateScalarWhereWithAggregatesInput | TemplateScalarWhereWithAggregatesInput[]
    OR?: TemplateScalarWhereWithAggregatesInput[]
    NOT?: TemplateScalarWhereWithAggregatesInput | TemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Template"> | string
    name?: StringWithAggregatesFilter<"Template"> | string
    created_by_id?: StringWithAggregatesFilter<"Template"> | string
    category_id?: StringNullableWithAggregatesFilter<"Template"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Template"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Template"> | Date | string
  }

  export type TemplateSectionWhereInput = {
    AND?: TemplateSectionWhereInput | TemplateSectionWhereInput[]
    OR?: TemplateSectionWhereInput[]
    NOT?: TemplateSectionWhereInput | TemplateSectionWhereInput[]
    id?: StringFilter<"TemplateSection"> | string
    template_id?: StringFilter<"TemplateSection"> | string
    title?: StringFilter<"TemplateSection"> | string
    default_text?: StringNullableFilter<"TemplateSection"> | string | null
    display_order?: IntFilter<"TemplateSection"> | number
    content?: JsonNullableFilter<"TemplateSection">
    createdAt?: DateTimeFilter<"TemplateSection"> | Date | string
    template?: XOR<TemplateRelationFilter, TemplateWhereInput>
    reportData?: ReportDataListRelationFilter
  }

  export type TemplateSectionOrderByWithRelationInput = {
    id?: SortOrder
    template_id?: SortOrder
    title?: SortOrder
    default_text?: SortOrderInput | SortOrder
    display_order?: SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    template?: TemplateOrderByWithRelationInput
    reportData?: ReportDataOrderByRelationAggregateInput
  }

  export type TemplateSectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TemplateSectionWhereInput | TemplateSectionWhereInput[]
    OR?: TemplateSectionWhereInput[]
    NOT?: TemplateSectionWhereInput | TemplateSectionWhereInput[]
    template_id?: StringFilter<"TemplateSection"> | string
    title?: StringFilter<"TemplateSection"> | string
    default_text?: StringNullableFilter<"TemplateSection"> | string | null
    display_order?: IntFilter<"TemplateSection"> | number
    content?: JsonNullableFilter<"TemplateSection">
    createdAt?: DateTimeFilter<"TemplateSection"> | Date | string
    template?: XOR<TemplateRelationFilter, TemplateWhereInput>
    reportData?: ReportDataListRelationFilter
  }, "id">

  export type TemplateSectionOrderByWithAggregationInput = {
    id?: SortOrder
    template_id?: SortOrder
    title?: SortOrder
    default_text?: SortOrderInput | SortOrder
    display_order?: SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TemplateSectionCountOrderByAggregateInput
    _avg?: TemplateSectionAvgOrderByAggregateInput
    _max?: TemplateSectionMaxOrderByAggregateInput
    _min?: TemplateSectionMinOrderByAggregateInput
    _sum?: TemplateSectionSumOrderByAggregateInput
  }

  export type TemplateSectionScalarWhereWithAggregatesInput = {
    AND?: TemplateSectionScalarWhereWithAggregatesInput | TemplateSectionScalarWhereWithAggregatesInput[]
    OR?: TemplateSectionScalarWhereWithAggregatesInput[]
    NOT?: TemplateSectionScalarWhereWithAggregatesInput | TemplateSectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TemplateSection"> | string
    template_id?: StringWithAggregatesFilter<"TemplateSection"> | string
    title?: StringWithAggregatesFilter<"TemplateSection"> | string
    default_text?: StringNullableWithAggregatesFilter<"TemplateSection"> | string | null
    display_order?: IntWithAggregatesFilter<"TemplateSection"> | number
    content?: JsonNullableWithAggregatesFilter<"TemplateSection">
    createdAt?: DateTimeWithAggregatesFilter<"TemplateSection"> | Date | string
  }

  export type ActionRuleWhereInput = {
    AND?: ActionRuleWhereInput | ActionRuleWhereInput[]
    OR?: ActionRuleWhereInput[]
    NOT?: ActionRuleWhereInput | ActionRuleWhereInput[]
    id?: StringFilter<"ActionRule"> | string
    template_id?: StringFilter<"ActionRule"> | string
    source_action_id?: StringFilter<"ActionRule"> | string
    target_section_id?: StringFilter<"ActionRule"> | string
    action_text?: StringFilter<"ActionRule"> | string
    createdAt?: DateTimeFilter<"ActionRule"> | Date | string
    template?: XOR<TemplateRelationFilter, TemplateWhereInput>
  }

  export type ActionRuleOrderByWithRelationInput = {
    id?: SortOrder
    template_id?: SortOrder
    source_action_id?: SortOrder
    target_section_id?: SortOrder
    action_text?: SortOrder
    createdAt?: SortOrder
    template?: TemplateOrderByWithRelationInput
  }

  export type ActionRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActionRuleWhereInput | ActionRuleWhereInput[]
    OR?: ActionRuleWhereInput[]
    NOT?: ActionRuleWhereInput | ActionRuleWhereInput[]
    template_id?: StringFilter<"ActionRule"> | string
    source_action_id?: StringFilter<"ActionRule"> | string
    target_section_id?: StringFilter<"ActionRule"> | string
    action_text?: StringFilter<"ActionRule"> | string
    createdAt?: DateTimeFilter<"ActionRule"> | Date | string
    template?: XOR<TemplateRelationFilter, TemplateWhereInput>
  }, "id">

  export type ActionRuleOrderByWithAggregationInput = {
    id?: SortOrder
    template_id?: SortOrder
    source_action_id?: SortOrder
    target_section_id?: SortOrder
    action_text?: SortOrder
    createdAt?: SortOrder
    _count?: ActionRuleCountOrderByAggregateInput
    _max?: ActionRuleMaxOrderByAggregateInput
    _min?: ActionRuleMinOrderByAggregateInput
  }

  export type ActionRuleScalarWhereWithAggregatesInput = {
    AND?: ActionRuleScalarWhereWithAggregatesInput | ActionRuleScalarWhereWithAggregatesInput[]
    OR?: ActionRuleScalarWhereWithAggregatesInput[]
    NOT?: ActionRuleScalarWhereWithAggregatesInput | ActionRuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActionRule"> | string
    template_id?: StringWithAggregatesFilter<"ActionRule"> | string
    source_action_id?: StringWithAggregatesFilter<"ActionRule"> | string
    target_section_id?: StringWithAggregatesFilter<"ActionRule"> | string
    action_text?: StringWithAggregatesFilter<"ActionRule"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActionRule"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    user_id?: StringFilter<"Report"> | string
    template_id?: StringFilter<"Report"> | string
    status?: StringFilter<"Report"> | string
    pdf_url?: StringNullableFilter<"Report"> | string | null
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    template?: XOR<TemplateRelationFilter, TemplateWhereInput>
    reportData?: ReportDataListRelationFilter
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    template_id?: SortOrder
    status?: SortOrder
    pdf_url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    template?: TemplateOrderByWithRelationInput
    reportData?: ReportDataOrderByRelationAggregateInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    user_id?: StringFilter<"Report"> | string
    template_id?: StringFilter<"Report"> | string
    status?: StringFilter<"Report"> | string
    pdf_url?: StringNullableFilter<"Report"> | string | null
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    template?: XOR<TemplateRelationFilter, TemplateWhereInput>
    reportData?: ReportDataListRelationFilter
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    template_id?: SortOrder
    status?: SortOrder
    pdf_url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    user_id?: StringWithAggregatesFilter<"Report"> | string
    template_id?: StringWithAggregatesFilter<"Report"> | string
    status?: StringWithAggregatesFilter<"Report"> | string
    pdf_url?: StringNullableWithAggregatesFilter<"Report"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
  }

  export type ReportDataWhereInput = {
    AND?: ReportDataWhereInput | ReportDataWhereInput[]
    OR?: ReportDataWhereInput[]
    NOT?: ReportDataWhereInput | ReportDataWhereInput[]
    id?: StringFilter<"ReportData"> | string
    report_id?: StringFilter<"ReportData"> | string
    section_id?: StringFilter<"ReportData"> | string
    content?: StringNullableFilter<"ReportData"> | string | null
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    section?: XOR<TemplateSectionRelationFilter, TemplateSectionWhereInput>
  }

  export type ReportDataOrderByWithRelationInput = {
    id?: SortOrder
    report_id?: SortOrder
    section_id?: SortOrder
    content?: SortOrderInput | SortOrder
    report?: ReportOrderByWithRelationInput
    section?: TemplateSectionOrderByWithRelationInput
  }

  export type ReportDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    report_id_section_id?: ReportDataReport_idSection_idCompoundUniqueInput
    AND?: ReportDataWhereInput | ReportDataWhereInput[]
    OR?: ReportDataWhereInput[]
    NOT?: ReportDataWhereInput | ReportDataWhereInput[]
    report_id?: StringFilter<"ReportData"> | string
    section_id?: StringFilter<"ReportData"> | string
    content?: StringNullableFilter<"ReportData"> | string | null
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    section?: XOR<TemplateSectionRelationFilter, TemplateSectionWhereInput>
  }, "id" | "report_id_section_id">

  export type ReportDataOrderByWithAggregationInput = {
    id?: SortOrder
    report_id?: SortOrder
    section_id?: SortOrder
    content?: SortOrderInput | SortOrder
    _count?: ReportDataCountOrderByAggregateInput
    _max?: ReportDataMaxOrderByAggregateInput
    _min?: ReportDataMinOrderByAggregateInput
  }

  export type ReportDataScalarWhereWithAggregatesInput = {
    AND?: ReportDataScalarWhereWithAggregatesInput | ReportDataScalarWhereWithAggregatesInput[]
    OR?: ReportDataScalarWhereWithAggregatesInput[]
    NOT?: ReportDataScalarWhereWithAggregatesInput | ReportDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportData"> | string
    report_id?: StringWithAggregatesFilter<"ReportData"> | string
    section_id?: StringWithAggregatesFilter<"ReportData"> | string
    content?: StringNullableWithAggregatesFilter<"ReportData"> | string | null
  }

  export type LetterheadWhereInput = {
    AND?: LetterheadWhereInput | LetterheadWhereInput[]
    OR?: LetterheadWhereInput[]
    NOT?: LetterheadWhereInput | LetterheadWhereInput[]
    id?: StringFilter<"Letterhead"> | string
    name?: StringFilter<"Letterhead"> | string
    header_image_url?: StringNullableFilter<"Letterhead"> | string | null
    footer_image_url?: StringNullableFilter<"Letterhead"> | string | null
    createdAt?: DateTimeFilter<"Letterhead"> | Date | string
  }

  export type LetterheadOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    header_image_url?: SortOrderInput | SortOrder
    footer_image_url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type LetterheadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LetterheadWhereInput | LetterheadWhereInput[]
    OR?: LetterheadWhereInput[]
    NOT?: LetterheadWhereInput | LetterheadWhereInput[]
    name?: StringFilter<"Letterhead"> | string
    header_image_url?: StringNullableFilter<"Letterhead"> | string | null
    footer_image_url?: StringNullableFilter<"Letterhead"> | string | null
    createdAt?: DateTimeFilter<"Letterhead"> | Date | string
  }, "id">

  export type LetterheadOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    header_image_url?: SortOrderInput | SortOrder
    footer_image_url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LetterheadCountOrderByAggregateInput
    _max?: LetterheadMaxOrderByAggregateInput
    _min?: LetterheadMinOrderByAggregateInput
  }

  export type LetterheadScalarWhereWithAggregatesInput = {
    AND?: LetterheadScalarWhereWithAggregatesInput | LetterheadScalarWhereWithAggregatesInput[]
    OR?: LetterheadScalarWhereWithAggregatesInput[]
    NOT?: LetterheadScalarWhereWithAggregatesInput | LetterheadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Letterhead"> | string
    name?: StringWithAggregatesFilter<"Letterhead"> | string
    header_image_url?: StringNullableWithAggregatesFilter<"Letterhead"> | string | null
    footer_image_url?: StringNullableWithAggregatesFilter<"Letterhead"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Letterhead"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: BigIntFilter<"AuditLog"> | bigint | number
    user_id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    target_resource_id?: StringNullableFilter<"AuditLog"> | string | null
    target_resource_type?: StringNullableFilter<"AuditLog"> | string | null
    ip_address?: StringNullableFilter<"AuditLog"> | string | null
    user_agent?: StringNullableFilter<"AuditLog"> | string | null
    data_snapshot?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
    target_resource_id?: SortOrderInput | SortOrder
    target_resource_type?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    data_snapshot?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    user_id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    target_resource_id?: StringNullableFilter<"AuditLog"> | string | null
    target_resource_type?: StringNullableFilter<"AuditLog"> | string | null
    ip_address?: StringNullableFilter<"AuditLog"> | string | null
    user_agent?: StringNullableFilter<"AuditLog"> | string | null
    data_snapshot?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
    target_resource_id?: SortOrderInput | SortOrder
    target_resource_type?: SortOrderInput | SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    data_snapshot?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"AuditLog"> | bigint | number
    user_id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    target_resource_id?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    target_resource_type?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ip_address?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    data_snapshot?: JsonNullableWithAggregatesFilter<"AuditLog">
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    templates?: TemplateCreateNestedManyWithoutCreated_byInput
    reports?: ReportCreateNestedManyWithoutUserInput
    audit_logs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    templates?: TemplateUncheckedCreateNestedManyWithoutCreated_byInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    audit_logs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    templates?: TemplateUpdateManyWithoutCreated_byNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    audit_logs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutCreated_byNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    audit_logs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    stripe_subscription_id: string
    plan_type: string
    status: $Enums.SubscriptionStatus
    current_period_end: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    user_id: string
    stripe_subscription_id: string
    plan_type: string
    status: $Enums.SubscriptionStatus
    current_period_end: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_subscription_id?: StringFieldUpdateOperationsInput | string
    plan_type?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    stripe_subscription_id?: StringFieldUpdateOperationsInput | string
    plan_type?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    user_id: string
    stripe_subscription_id: string
    plan_type: string
    status: $Enums.SubscriptionStatus
    current_period_end: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_subscription_id?: StringFieldUpdateOperationsInput | string
    plan_type?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    stripe_subscription_id?: StringFieldUpdateOperationsInput | string
    plan_type?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateCategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    templates?: TemplateCreateNestedManyWithoutCategoryInput
  }

  export type TemplateCategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    templates?: TemplateUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TemplateCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    templates?: TemplateUpdateManyWithoutCategoryNestedInput
  }

  export type TemplateCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    templates?: TemplateUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TemplateCategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type TemplateCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    created_by: UserCreateNestedOneWithoutTemplatesInput
    category?: TemplateCategoryCreateNestedOneWithoutTemplatesInput
    sections?: TemplateSectionCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleCreateNestedManyWithoutTemplateInput
    reports?: ReportCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateInput = {
    id?: string
    name: string
    created_by_id: string
    category_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: TemplateSectionUncheckedCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleUncheckedCreateNestedManyWithoutTemplateInput
    reports?: ReportUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: UserUpdateOneRequiredWithoutTemplatesNestedInput
    category?: TemplateCategoryUpdateOneWithoutTemplatesNestedInput
    sections?: TemplateSectionUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUpdateManyWithoutTemplateNestedInput
    reports?: ReportUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_by_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: TemplateSectionUncheckedUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUncheckedUpdateManyWithoutTemplateNestedInput
    reports?: ReportUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateCreateManyInput = {
    id?: string
    name: string
    created_by_id: string
    category_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_by_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateSectionCreateInput = {
    id?: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    template: TemplateCreateNestedOneWithoutSectionsInput
    reportData?: ReportDataCreateNestedManyWithoutSectionInput
  }

  export type TemplateSectionUncheckedCreateInput = {
    id?: string
    template_id: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    reportData?: ReportDataUncheckedCreateNestedManyWithoutSectionInput
  }

  export type TemplateSectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: TemplateUpdateOneRequiredWithoutSectionsNestedInput
    reportData?: ReportDataUpdateManyWithoutSectionNestedInput
  }

  export type TemplateSectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportData?: ReportDataUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type TemplateSectionCreateManyInput = {
    id?: string
    template_id: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TemplateSectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateSectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionRuleCreateInput = {
    id?: string
    source_action_id: string
    target_section_id: string
    action_text: string
    createdAt?: Date | string
    template: TemplateCreateNestedOneWithoutActionRulesInput
  }

  export type ActionRuleUncheckedCreateInput = {
    id?: string
    template_id: string
    source_action_id: string
    target_section_id: string
    action_text: string
    createdAt?: Date | string
  }

  export type ActionRuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source_action_id?: StringFieldUpdateOperationsInput | string
    target_section_id?: StringFieldUpdateOperationsInput | string
    action_text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: TemplateUpdateOneRequiredWithoutActionRulesNestedInput
  }

  export type ActionRuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    source_action_id?: StringFieldUpdateOperationsInput | string
    target_section_id?: StringFieldUpdateOperationsInput | string
    action_text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionRuleCreateManyInput = {
    id?: string
    template_id: string
    source_action_id: string
    target_section_id: string
    action_text: string
    createdAt?: Date | string
  }

  export type ActionRuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    source_action_id?: StringFieldUpdateOperationsInput | string
    target_section_id?: StringFieldUpdateOperationsInput | string
    action_text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionRuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    source_action_id?: StringFieldUpdateOperationsInput | string
    target_section_id?: StringFieldUpdateOperationsInput | string
    action_text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    id?: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReportsInput
    template: TemplateCreateNestedOneWithoutReportsInput
    reportData?: ReportDataCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    user_id: string
    template_id: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportData?: ReportDataUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    template?: TemplateUpdateOneRequiredWithoutReportsNestedInput
    reportData?: ReportDataUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportData?: ReportDataUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportCreateManyInput = {
    id?: string
    user_id: string
    template_id: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDataCreateInput = {
    id?: string
    content?: string | null
    report: ReportCreateNestedOneWithoutReportDataInput
    section: TemplateSectionCreateNestedOneWithoutReportDataInput
  }

  export type ReportDataUncheckedCreateInput = {
    id?: string
    report_id: string
    section_id: string
    content?: string | null
  }

  export type ReportDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    report?: ReportUpdateOneRequiredWithoutReportDataNestedInput
    section?: TemplateSectionUpdateOneRequiredWithoutReportDataNestedInput
  }

  export type ReportDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_id?: StringFieldUpdateOperationsInput | string
    section_id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDataCreateManyInput = {
    id?: string
    report_id: string
    section_id: string
    content?: string | null
  }

  export type ReportDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_id?: StringFieldUpdateOperationsInput | string
    section_id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LetterheadCreateInput = {
    id?: string
    name: string
    header_image_url?: string | null
    footer_image_url?: string | null
    createdAt?: Date | string
  }

  export type LetterheadUncheckedCreateInput = {
    id?: string
    name: string
    header_image_url?: string | null
    footer_image_url?: string | null
    createdAt?: Date | string
  }

  export type LetterheadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    header_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    footer_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterheadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    header_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    footer_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterheadCreateManyInput = {
    id?: string
    name: string
    header_image_url?: string | null
    footer_image_url?: string | null
    createdAt?: Date | string
  }

  export type LetterheadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    header_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    footer_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LetterheadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    header_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    footer_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: bigint | number
    action: string
    target_resource_id?: string | null
    target_resource_type?: string | null
    ip_address?: string | null
    user_agent?: string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutAudit_logsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: bigint | number
    user_id: string
    action: string
    target_resource_id?: string | null
    target_resource_type?: string | null
    ip_address?: string | null
    user_agent?: string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    action?: StringFieldUpdateOperationsInput | string
    target_resource_id?: NullableStringFieldUpdateOperationsInput | string | null
    target_resource_type?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAudit_logsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    target_resource_id?: NullableStringFieldUpdateOperationsInput | string | null
    target_resource_type?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: bigint | number
    user_id: string
    action: string
    target_resource_id?: string | null
    target_resource_type?: string | null
    ip_address?: string | null
    user_agent?: string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    action?: StringFieldUpdateOperationsInput | string
    target_resource_id?: NullableStringFieldUpdateOperationsInput | string | null
    target_resource_type?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    target_resource_id?: NullableStringFieldUpdateOperationsInput | string | null
    target_resource_type?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SubscriptionNullableRelationFilter = {
    is?: SubscriptionWhereInput | null
    isNot?: SubscriptionWhereInput | null
  }

  export type TemplateListRelationFilter = {
    every?: TemplateWhereInput
    some?: TemplateWhereInput
    none?: TemplateWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCrmCrm_ufCompoundUniqueInput = {
    crm: string
    crm_uf: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    cpf?: SortOrder
    crm?: SortOrder
    crm_uf?: SortOrder
    is_admin?: SortOrder
    is_email_verified?: SortOrder
    email_verification_token?: SortOrder
    email_verification_expires_at?: SortOrder
    stripe_customer_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    cpf?: SortOrder
    crm?: SortOrder
    crm_uf?: SortOrder
    is_admin?: SortOrder
    is_email_verified?: SortOrder
    email_verification_token?: SortOrder
    email_verification_expires_at?: SortOrder
    stripe_customer_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password_hash?: SortOrder
    cpf?: SortOrder
    crm?: SortOrder
    crm_uf?: SortOrder
    is_admin?: SortOrder
    is_email_verified?: SortOrder
    email_verification_token?: SortOrder
    email_verification_expires_at?: SortOrder
    stripe_customer_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_subscription_id?: SortOrder
    plan_type?: SortOrder
    status?: SortOrder
    current_period_end?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_subscription_id?: SortOrder
    plan_type?: SortOrder
    status?: SortOrder
    current_period_end?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    stripe_subscription_id?: SortOrder
    plan_type?: SortOrder
    status?: SortOrder
    current_period_end?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type TemplateCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type TemplateCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type TemplateCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
  }

  export type TemplateCategoryNullableRelationFilter = {
    is?: TemplateCategoryWhereInput | null
    isNot?: TemplateCategoryWhereInput | null
  }

  export type TemplateSectionListRelationFilter = {
    every?: TemplateSectionWhereInput
    some?: TemplateSectionWhereInput
    none?: TemplateSectionWhereInput
  }

  export type ActionRuleListRelationFilter = {
    every?: ActionRuleWhereInput
    some?: ActionRuleWhereInput
    none?: ActionRuleWhereInput
  }

  export type TemplateSectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActionRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_by_id?: SortOrder
    category_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_by_id?: SortOrder
    category_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_by_id?: SortOrder
    category_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TemplateRelationFilter = {
    is?: TemplateWhereInput
    isNot?: TemplateWhereInput
  }

  export type ReportDataListRelationFilter = {
    every?: ReportDataWhereInput
    some?: ReportDataWhereInput
    none?: ReportDataWhereInput
  }

  export type ReportDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TemplateSectionCountOrderByAggregateInput = {
    id?: SortOrder
    template_id?: SortOrder
    title?: SortOrder
    default_text?: SortOrder
    display_order?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type TemplateSectionAvgOrderByAggregateInput = {
    display_order?: SortOrder
  }

  export type TemplateSectionMaxOrderByAggregateInput = {
    id?: SortOrder
    template_id?: SortOrder
    title?: SortOrder
    default_text?: SortOrder
    display_order?: SortOrder
    createdAt?: SortOrder
  }

  export type TemplateSectionMinOrderByAggregateInput = {
    id?: SortOrder
    template_id?: SortOrder
    title?: SortOrder
    default_text?: SortOrder
    display_order?: SortOrder
    createdAt?: SortOrder
  }

  export type TemplateSectionSumOrderByAggregateInput = {
    display_order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ActionRuleCountOrderByAggregateInput = {
    id?: SortOrder
    template_id?: SortOrder
    source_action_id?: SortOrder
    target_section_id?: SortOrder
    action_text?: SortOrder
    createdAt?: SortOrder
  }

  export type ActionRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    template_id?: SortOrder
    source_action_id?: SortOrder
    target_section_id?: SortOrder
    action_text?: SortOrder
    createdAt?: SortOrder
  }

  export type ActionRuleMinOrderByAggregateInput = {
    id?: SortOrder
    template_id?: SortOrder
    source_action_id?: SortOrder
    target_section_id?: SortOrder
    action_text?: SortOrder
    createdAt?: SortOrder
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    template_id?: SortOrder
    status?: SortOrder
    pdf_url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    template_id?: SortOrder
    status?: SortOrder
    pdf_url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    template_id?: SortOrder
    status?: SortOrder
    pdf_url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReportRelationFilter = {
    is?: ReportWhereInput
    isNot?: ReportWhereInput
  }

  export type TemplateSectionRelationFilter = {
    is?: TemplateSectionWhereInput
    isNot?: TemplateSectionWhereInput
  }

  export type ReportDataReport_idSection_idCompoundUniqueInput = {
    report_id: string
    section_id: string
  }

  export type ReportDataCountOrderByAggregateInput = {
    id?: SortOrder
    report_id?: SortOrder
    section_id?: SortOrder
    content?: SortOrder
  }

  export type ReportDataMaxOrderByAggregateInput = {
    id?: SortOrder
    report_id?: SortOrder
    section_id?: SortOrder
    content?: SortOrder
  }

  export type ReportDataMinOrderByAggregateInput = {
    id?: SortOrder
    report_id?: SortOrder
    section_id?: SortOrder
    content?: SortOrder
  }

  export type LetterheadCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    header_image_url?: SortOrder
    footer_image_url?: SortOrder
    createdAt?: SortOrder
  }

  export type LetterheadMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    header_image_url?: SortOrder
    footer_image_url?: SortOrder
    createdAt?: SortOrder
  }

  export type LetterheadMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    header_image_url?: SortOrder
    footer_image_url?: SortOrder
    createdAt?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
    target_resource_id?: SortOrder
    target_resource_type?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    data_snapshot?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
    target_resource_id?: SortOrder
    target_resource_type?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    action?: SortOrder
    target_resource_id?: SortOrder
    target_resource_type?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type SubscriptionCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type TemplateCreateNestedManyWithoutCreated_byInput = {
    create?: XOR<TemplateCreateWithoutCreated_byInput, TemplateUncheckedCreateWithoutCreated_byInput> | TemplateCreateWithoutCreated_byInput[] | TemplateUncheckedCreateWithoutCreated_byInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCreated_byInput | TemplateCreateOrConnectWithoutCreated_byInput[]
    createMany?: TemplateCreateManyCreated_byInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type TemplateUncheckedCreateNestedManyWithoutCreated_byInput = {
    create?: XOR<TemplateCreateWithoutCreated_byInput, TemplateUncheckedCreateWithoutCreated_byInput> | TemplateCreateWithoutCreated_byInput[] | TemplateUncheckedCreateWithoutCreated_byInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCreated_byInput | TemplateCreateOrConnectWithoutCreated_byInput[]
    createMany?: TemplateCreateManyCreated_byInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SubscriptionUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type TemplateUpdateManyWithoutCreated_byNestedInput = {
    create?: XOR<TemplateCreateWithoutCreated_byInput, TemplateUncheckedCreateWithoutCreated_byInput> | TemplateCreateWithoutCreated_byInput[] | TemplateUncheckedCreateWithoutCreated_byInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCreated_byInput | TemplateCreateOrConnectWithoutCreated_byInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutCreated_byInput | TemplateUpsertWithWhereUniqueWithoutCreated_byInput[]
    createMany?: TemplateCreateManyCreated_byInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutCreated_byInput | TemplateUpdateWithWhereUniqueWithoutCreated_byInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutCreated_byInput | TemplateUpdateManyWithWhereWithoutCreated_byInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput
    upsert?: SubscriptionUpsertWithoutUserInput
    disconnect?: SubscriptionWhereInput | boolean
    delete?: SubscriptionWhereInput | boolean
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUserInput, SubscriptionUpdateWithoutUserInput>, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type TemplateUncheckedUpdateManyWithoutCreated_byNestedInput = {
    create?: XOR<TemplateCreateWithoutCreated_byInput, TemplateUncheckedCreateWithoutCreated_byInput> | TemplateCreateWithoutCreated_byInput[] | TemplateUncheckedCreateWithoutCreated_byInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCreated_byInput | TemplateCreateOrConnectWithoutCreated_byInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutCreated_byInput | TemplateUpsertWithWhereUniqueWithoutCreated_byInput[]
    createMany?: TemplateCreateManyCreated_byInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutCreated_byInput | TemplateUpdateWithWhereUniqueWithoutCreated_byInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutCreated_byInput | TemplateUpdateManyWithWhereWithoutCreated_byInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type UserUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    upsert?: UserUpsertWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionInput, UserUpdateWithoutSubscriptionInput>, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type TemplateCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TemplateCreateWithoutCategoryInput, TemplateUncheckedCreateWithoutCategoryInput> | TemplateCreateWithoutCategoryInput[] | TemplateUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCategoryInput | TemplateCreateOrConnectWithoutCategoryInput[]
    createMany?: TemplateCreateManyCategoryInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type TemplateUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TemplateCreateWithoutCategoryInput, TemplateUncheckedCreateWithoutCategoryInput> | TemplateCreateWithoutCategoryInput[] | TemplateUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCategoryInput | TemplateCreateOrConnectWithoutCategoryInput[]
    createMany?: TemplateCreateManyCategoryInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type TemplateUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TemplateCreateWithoutCategoryInput, TemplateUncheckedCreateWithoutCategoryInput> | TemplateCreateWithoutCategoryInput[] | TemplateUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCategoryInput | TemplateCreateOrConnectWithoutCategoryInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutCategoryInput | TemplateUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TemplateCreateManyCategoryInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutCategoryInput | TemplateUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutCategoryInput | TemplateUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type TemplateUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TemplateCreateWithoutCategoryInput, TemplateUncheckedCreateWithoutCategoryInput> | TemplateCreateWithoutCategoryInput[] | TemplateUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutCategoryInput | TemplateCreateOrConnectWithoutCategoryInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutCategoryInput | TemplateUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TemplateCreateManyCategoryInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutCategoryInput | TemplateUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutCategoryInput | TemplateUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTemplatesInput
    connect?: UserWhereUniqueInput
  }

  export type TemplateCategoryCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<TemplateCategoryCreateWithoutTemplatesInput, TemplateCategoryUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: TemplateCategoryCreateOrConnectWithoutTemplatesInput
    connect?: TemplateCategoryWhereUniqueInput
  }

  export type TemplateSectionCreateNestedManyWithoutTemplateInput = {
    create?: XOR<TemplateSectionCreateWithoutTemplateInput, TemplateSectionUncheckedCreateWithoutTemplateInput> | TemplateSectionCreateWithoutTemplateInput[] | TemplateSectionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateSectionCreateOrConnectWithoutTemplateInput | TemplateSectionCreateOrConnectWithoutTemplateInput[]
    createMany?: TemplateSectionCreateManyTemplateInputEnvelope
    connect?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
  }

  export type ActionRuleCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ActionRuleCreateWithoutTemplateInput, ActionRuleUncheckedCreateWithoutTemplateInput> | ActionRuleCreateWithoutTemplateInput[] | ActionRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ActionRuleCreateOrConnectWithoutTemplateInput | ActionRuleCreateOrConnectWithoutTemplateInput[]
    createMany?: ActionRuleCreateManyTemplateInputEnvelope
    connect?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ReportCreateWithoutTemplateInput, ReportUncheckedCreateWithoutTemplateInput> | ReportCreateWithoutTemplateInput[] | ReportUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTemplateInput | ReportCreateOrConnectWithoutTemplateInput[]
    createMany?: ReportCreateManyTemplateInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type TemplateSectionUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<TemplateSectionCreateWithoutTemplateInput, TemplateSectionUncheckedCreateWithoutTemplateInput> | TemplateSectionCreateWithoutTemplateInput[] | TemplateSectionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateSectionCreateOrConnectWithoutTemplateInput | TemplateSectionCreateOrConnectWithoutTemplateInput[]
    createMany?: TemplateSectionCreateManyTemplateInputEnvelope
    connect?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
  }

  export type ActionRuleUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ActionRuleCreateWithoutTemplateInput, ActionRuleUncheckedCreateWithoutTemplateInput> | ActionRuleCreateWithoutTemplateInput[] | ActionRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ActionRuleCreateOrConnectWithoutTemplateInput | ActionRuleCreateOrConnectWithoutTemplateInput[]
    createMany?: ActionRuleCreateManyTemplateInputEnvelope
    connect?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ReportCreateWithoutTemplateInput, ReportUncheckedCreateWithoutTemplateInput> | ReportCreateWithoutTemplateInput[] | ReportUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTemplateInput | ReportCreateOrConnectWithoutTemplateInput[]
    createMany?: ReportCreateManyTemplateInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTemplatesNestedInput = {
    create?: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTemplatesInput
    upsert?: UserUpsertWithoutTemplatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTemplatesInput, UserUpdateWithoutTemplatesInput>, UserUncheckedUpdateWithoutTemplatesInput>
  }

  export type TemplateCategoryUpdateOneWithoutTemplatesNestedInput = {
    create?: XOR<TemplateCategoryCreateWithoutTemplatesInput, TemplateCategoryUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: TemplateCategoryCreateOrConnectWithoutTemplatesInput
    upsert?: TemplateCategoryUpsertWithoutTemplatesInput
    disconnect?: TemplateCategoryWhereInput | boolean
    delete?: TemplateCategoryWhereInput | boolean
    connect?: TemplateCategoryWhereUniqueInput
    update?: XOR<XOR<TemplateCategoryUpdateToOneWithWhereWithoutTemplatesInput, TemplateCategoryUpdateWithoutTemplatesInput>, TemplateCategoryUncheckedUpdateWithoutTemplatesInput>
  }

  export type TemplateSectionUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<TemplateSectionCreateWithoutTemplateInput, TemplateSectionUncheckedCreateWithoutTemplateInput> | TemplateSectionCreateWithoutTemplateInput[] | TemplateSectionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateSectionCreateOrConnectWithoutTemplateInput | TemplateSectionCreateOrConnectWithoutTemplateInput[]
    upsert?: TemplateSectionUpsertWithWhereUniqueWithoutTemplateInput | TemplateSectionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: TemplateSectionCreateManyTemplateInputEnvelope
    set?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    disconnect?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    delete?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    connect?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    update?: TemplateSectionUpdateWithWhereUniqueWithoutTemplateInput | TemplateSectionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: TemplateSectionUpdateManyWithWhereWithoutTemplateInput | TemplateSectionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: TemplateSectionScalarWhereInput | TemplateSectionScalarWhereInput[]
  }

  export type ActionRuleUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ActionRuleCreateWithoutTemplateInput, ActionRuleUncheckedCreateWithoutTemplateInput> | ActionRuleCreateWithoutTemplateInput[] | ActionRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ActionRuleCreateOrConnectWithoutTemplateInput | ActionRuleCreateOrConnectWithoutTemplateInput[]
    upsert?: ActionRuleUpsertWithWhereUniqueWithoutTemplateInput | ActionRuleUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ActionRuleCreateManyTemplateInputEnvelope
    set?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    disconnect?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    delete?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    connect?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    update?: ActionRuleUpdateWithWhereUniqueWithoutTemplateInput | ActionRuleUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ActionRuleUpdateManyWithWhereWithoutTemplateInput | ActionRuleUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ActionRuleScalarWhereInput | ActionRuleScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ReportCreateWithoutTemplateInput, ReportUncheckedCreateWithoutTemplateInput> | ReportCreateWithoutTemplateInput[] | ReportUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTemplateInput | ReportCreateOrConnectWithoutTemplateInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutTemplateInput | ReportUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ReportCreateManyTemplateInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutTemplateInput | ReportUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutTemplateInput | ReportUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type TemplateSectionUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<TemplateSectionCreateWithoutTemplateInput, TemplateSectionUncheckedCreateWithoutTemplateInput> | TemplateSectionCreateWithoutTemplateInput[] | TemplateSectionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: TemplateSectionCreateOrConnectWithoutTemplateInput | TemplateSectionCreateOrConnectWithoutTemplateInput[]
    upsert?: TemplateSectionUpsertWithWhereUniqueWithoutTemplateInput | TemplateSectionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: TemplateSectionCreateManyTemplateInputEnvelope
    set?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    disconnect?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    delete?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    connect?: TemplateSectionWhereUniqueInput | TemplateSectionWhereUniqueInput[]
    update?: TemplateSectionUpdateWithWhereUniqueWithoutTemplateInput | TemplateSectionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: TemplateSectionUpdateManyWithWhereWithoutTemplateInput | TemplateSectionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: TemplateSectionScalarWhereInput | TemplateSectionScalarWhereInput[]
  }

  export type ActionRuleUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ActionRuleCreateWithoutTemplateInput, ActionRuleUncheckedCreateWithoutTemplateInput> | ActionRuleCreateWithoutTemplateInput[] | ActionRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ActionRuleCreateOrConnectWithoutTemplateInput | ActionRuleCreateOrConnectWithoutTemplateInput[]
    upsert?: ActionRuleUpsertWithWhereUniqueWithoutTemplateInput | ActionRuleUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ActionRuleCreateManyTemplateInputEnvelope
    set?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    disconnect?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    delete?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    connect?: ActionRuleWhereUniqueInput | ActionRuleWhereUniqueInput[]
    update?: ActionRuleUpdateWithWhereUniqueWithoutTemplateInput | ActionRuleUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ActionRuleUpdateManyWithWhereWithoutTemplateInput | ActionRuleUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ActionRuleScalarWhereInput | ActionRuleScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ReportCreateWithoutTemplateInput, ReportUncheckedCreateWithoutTemplateInput> | ReportCreateWithoutTemplateInput[] | ReportUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutTemplateInput | ReportCreateOrConnectWithoutTemplateInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutTemplateInput | ReportUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ReportCreateManyTemplateInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutTemplateInput | ReportUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutTemplateInput | ReportUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type TemplateCreateNestedOneWithoutSectionsInput = {
    create?: XOR<TemplateCreateWithoutSectionsInput, TemplateUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutSectionsInput
    connect?: TemplateWhereUniqueInput
  }

  export type ReportDataCreateNestedManyWithoutSectionInput = {
    create?: XOR<ReportDataCreateWithoutSectionInput, ReportDataUncheckedCreateWithoutSectionInput> | ReportDataCreateWithoutSectionInput[] | ReportDataUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutSectionInput | ReportDataCreateOrConnectWithoutSectionInput[]
    createMany?: ReportDataCreateManySectionInputEnvelope
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
  }

  export type ReportDataUncheckedCreateNestedManyWithoutSectionInput = {
    create?: XOR<ReportDataCreateWithoutSectionInput, ReportDataUncheckedCreateWithoutSectionInput> | ReportDataCreateWithoutSectionInput[] | ReportDataUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutSectionInput | ReportDataCreateOrConnectWithoutSectionInput[]
    createMany?: ReportDataCreateManySectionInputEnvelope
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TemplateUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<TemplateCreateWithoutSectionsInput, TemplateUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutSectionsInput
    upsert?: TemplateUpsertWithoutSectionsInput
    connect?: TemplateWhereUniqueInput
    update?: XOR<XOR<TemplateUpdateToOneWithWhereWithoutSectionsInput, TemplateUpdateWithoutSectionsInput>, TemplateUncheckedUpdateWithoutSectionsInput>
  }

  export type ReportDataUpdateManyWithoutSectionNestedInput = {
    create?: XOR<ReportDataCreateWithoutSectionInput, ReportDataUncheckedCreateWithoutSectionInput> | ReportDataCreateWithoutSectionInput[] | ReportDataUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutSectionInput | ReportDataCreateOrConnectWithoutSectionInput[]
    upsert?: ReportDataUpsertWithWhereUniqueWithoutSectionInput | ReportDataUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: ReportDataCreateManySectionInputEnvelope
    set?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    disconnect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    delete?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    update?: ReportDataUpdateWithWhereUniqueWithoutSectionInput | ReportDataUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: ReportDataUpdateManyWithWhereWithoutSectionInput | ReportDataUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: ReportDataScalarWhereInput | ReportDataScalarWhereInput[]
  }

  export type ReportDataUncheckedUpdateManyWithoutSectionNestedInput = {
    create?: XOR<ReportDataCreateWithoutSectionInput, ReportDataUncheckedCreateWithoutSectionInput> | ReportDataCreateWithoutSectionInput[] | ReportDataUncheckedCreateWithoutSectionInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutSectionInput | ReportDataCreateOrConnectWithoutSectionInput[]
    upsert?: ReportDataUpsertWithWhereUniqueWithoutSectionInput | ReportDataUpsertWithWhereUniqueWithoutSectionInput[]
    createMany?: ReportDataCreateManySectionInputEnvelope
    set?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    disconnect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    delete?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    update?: ReportDataUpdateWithWhereUniqueWithoutSectionInput | ReportDataUpdateWithWhereUniqueWithoutSectionInput[]
    updateMany?: ReportDataUpdateManyWithWhereWithoutSectionInput | ReportDataUpdateManyWithWhereWithoutSectionInput[]
    deleteMany?: ReportDataScalarWhereInput | ReportDataScalarWhereInput[]
  }

  export type TemplateCreateNestedOneWithoutActionRulesInput = {
    create?: XOR<TemplateCreateWithoutActionRulesInput, TemplateUncheckedCreateWithoutActionRulesInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutActionRulesInput
    connect?: TemplateWhereUniqueInput
  }

  export type TemplateUpdateOneRequiredWithoutActionRulesNestedInput = {
    create?: XOR<TemplateCreateWithoutActionRulesInput, TemplateUncheckedCreateWithoutActionRulesInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutActionRulesInput
    upsert?: TemplateUpsertWithoutActionRulesInput
    connect?: TemplateWhereUniqueInput
    update?: XOR<XOR<TemplateUpdateToOneWithWhereWithoutActionRulesInput, TemplateUpdateWithoutActionRulesInput>, TemplateUncheckedUpdateWithoutActionRulesInput>
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type TemplateCreateNestedOneWithoutReportsInput = {
    create?: XOR<TemplateCreateWithoutReportsInput, TemplateUncheckedCreateWithoutReportsInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutReportsInput
    connect?: TemplateWhereUniqueInput
  }

  export type ReportDataCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportDataCreateWithoutReportInput, ReportDataUncheckedCreateWithoutReportInput> | ReportDataCreateWithoutReportInput[] | ReportDataUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutReportInput | ReportDataCreateOrConnectWithoutReportInput[]
    createMany?: ReportDataCreateManyReportInputEnvelope
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
  }

  export type ReportDataUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<ReportDataCreateWithoutReportInput, ReportDataUncheckedCreateWithoutReportInput> | ReportDataCreateWithoutReportInput[] | ReportDataUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutReportInput | ReportDataCreateOrConnectWithoutReportInput[]
    createMany?: ReportDataCreateManyReportInputEnvelope
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type TemplateUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<TemplateCreateWithoutReportsInput, TemplateUncheckedCreateWithoutReportsInput>
    connectOrCreate?: TemplateCreateOrConnectWithoutReportsInput
    upsert?: TemplateUpsertWithoutReportsInput
    connect?: TemplateWhereUniqueInput
    update?: XOR<XOR<TemplateUpdateToOneWithWhereWithoutReportsInput, TemplateUpdateWithoutReportsInput>, TemplateUncheckedUpdateWithoutReportsInput>
  }

  export type ReportDataUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportDataCreateWithoutReportInput, ReportDataUncheckedCreateWithoutReportInput> | ReportDataCreateWithoutReportInput[] | ReportDataUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutReportInput | ReportDataCreateOrConnectWithoutReportInput[]
    upsert?: ReportDataUpsertWithWhereUniqueWithoutReportInput | ReportDataUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportDataCreateManyReportInputEnvelope
    set?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    disconnect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    delete?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    update?: ReportDataUpdateWithWhereUniqueWithoutReportInput | ReportDataUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportDataUpdateManyWithWhereWithoutReportInput | ReportDataUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportDataScalarWhereInput | ReportDataScalarWhereInput[]
  }

  export type ReportDataUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<ReportDataCreateWithoutReportInput, ReportDataUncheckedCreateWithoutReportInput> | ReportDataCreateWithoutReportInput[] | ReportDataUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ReportDataCreateOrConnectWithoutReportInput | ReportDataCreateOrConnectWithoutReportInput[]
    upsert?: ReportDataUpsertWithWhereUniqueWithoutReportInput | ReportDataUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ReportDataCreateManyReportInputEnvelope
    set?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    disconnect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    delete?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    connect?: ReportDataWhereUniqueInput | ReportDataWhereUniqueInput[]
    update?: ReportDataUpdateWithWhereUniqueWithoutReportInput | ReportDataUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ReportDataUpdateManyWithWhereWithoutReportInput | ReportDataUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ReportDataScalarWhereInput | ReportDataScalarWhereInput[]
  }

  export type ReportCreateNestedOneWithoutReportDataInput = {
    create?: XOR<ReportCreateWithoutReportDataInput, ReportUncheckedCreateWithoutReportDataInput>
    connectOrCreate?: ReportCreateOrConnectWithoutReportDataInput
    connect?: ReportWhereUniqueInput
  }

  export type TemplateSectionCreateNestedOneWithoutReportDataInput = {
    create?: XOR<TemplateSectionCreateWithoutReportDataInput, TemplateSectionUncheckedCreateWithoutReportDataInput>
    connectOrCreate?: TemplateSectionCreateOrConnectWithoutReportDataInput
    connect?: TemplateSectionWhereUniqueInput
  }

  export type ReportUpdateOneRequiredWithoutReportDataNestedInput = {
    create?: XOR<ReportCreateWithoutReportDataInput, ReportUncheckedCreateWithoutReportDataInput>
    connectOrCreate?: ReportCreateOrConnectWithoutReportDataInput
    upsert?: ReportUpsertWithoutReportDataInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutReportDataInput, ReportUpdateWithoutReportDataInput>, ReportUncheckedUpdateWithoutReportDataInput>
  }

  export type TemplateSectionUpdateOneRequiredWithoutReportDataNestedInput = {
    create?: XOR<TemplateSectionCreateWithoutReportDataInput, TemplateSectionUncheckedCreateWithoutReportDataInput>
    connectOrCreate?: TemplateSectionCreateOrConnectWithoutReportDataInput
    upsert?: TemplateSectionUpsertWithoutReportDataInput
    connect?: TemplateSectionWhereUniqueInput
    update?: XOR<XOR<TemplateSectionUpdateToOneWithWhereWithoutReportDataInput, TemplateSectionUpdateWithoutReportDataInput>, TemplateSectionUncheckedUpdateWithoutReportDataInput>
  }

  export type UserCreateNestedOneWithoutAudit_logsInput = {
    create?: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAudit_logsInput
    connect?: UserWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutAudit_logsNestedInput = {
    create?: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAudit_logsInput
    upsert?: UserUpsertWithoutAudit_logsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAudit_logsInput, UserUpdateWithoutAudit_logsInput>, UserUncheckedUpdateWithoutAudit_logsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type SubscriptionCreateWithoutUserInput = {
    id?: string
    stripe_subscription_id: string
    plan_type: string
    status: $Enums.SubscriptionStatus
    current_period_end: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    stripe_subscription_id: string
    plan_type: string
    status: $Enums.SubscriptionStatus
    current_period_end: Date | string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type TemplateCreateWithoutCreated_byInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category?: TemplateCategoryCreateNestedOneWithoutTemplatesInput
    sections?: TemplateSectionCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleCreateNestedManyWithoutTemplateInput
    reports?: ReportCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutCreated_byInput = {
    id?: string
    name: string
    category_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: TemplateSectionUncheckedCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleUncheckedCreateNestedManyWithoutTemplateInput
    reports?: ReportUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateCreateOrConnectWithoutCreated_byInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutCreated_byInput, TemplateUncheckedCreateWithoutCreated_byInput>
  }

  export type TemplateCreateManyCreated_byInputEnvelope = {
    data: TemplateCreateManyCreated_byInput | TemplateCreateManyCreated_byInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutUserInput = {
    id?: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: TemplateCreateNestedOneWithoutReportsInput
    reportData?: ReportDataCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutUserInput = {
    id?: string
    template_id: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportData?: ReportDataUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutUserInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportCreateManyUserInputEnvelope = {
    data: ReportCreateManyUserInput | ReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: bigint | number
    action: string
    target_resource_id?: string | null
    target_resource_type?: string | null
    ip_address?: string | null
    user_agent?: string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    action: string
    target_resource_id?: string | null
    target_resource_type?: string | null
    ip_address?: string | null
    user_agent?: string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionUpsertWithoutUserInput = {
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutUserInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_subscription_id?: StringFieldUpdateOperationsInput | string
    plan_type?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    stripe_subscription_id?: StringFieldUpdateOperationsInput | string
    plan_type?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    current_period_end?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUpsertWithWhereUniqueWithoutCreated_byInput = {
    where: TemplateWhereUniqueInput
    update: XOR<TemplateUpdateWithoutCreated_byInput, TemplateUncheckedUpdateWithoutCreated_byInput>
    create: XOR<TemplateCreateWithoutCreated_byInput, TemplateUncheckedCreateWithoutCreated_byInput>
  }

  export type TemplateUpdateWithWhereUniqueWithoutCreated_byInput = {
    where: TemplateWhereUniqueInput
    data: XOR<TemplateUpdateWithoutCreated_byInput, TemplateUncheckedUpdateWithoutCreated_byInput>
  }

  export type TemplateUpdateManyWithWhereWithoutCreated_byInput = {
    where: TemplateScalarWhereInput
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyWithoutCreated_byInput>
  }

  export type TemplateScalarWhereInput = {
    AND?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
    OR?: TemplateScalarWhereInput[]
    NOT?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
    id?: StringFilter<"Template"> | string
    name?: StringFilter<"Template"> | string
    created_by_id?: StringFilter<"Template"> | string
    category_id?: StringNullableFilter<"Template"> | string | null
    createdAt?: DateTimeFilter<"Template"> | Date | string
    updatedAt?: DateTimeFilter<"Template"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
  }

  export type ReportUpdateManyWithWhereWithoutUserInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: StringFilter<"Report"> | string
    user_id?: StringFilter<"Report"> | string
    template_id?: StringFilter<"Report"> | string
    status?: StringFilter<"Report"> | string
    pdf_url?: StringNullableFilter<"Report"> | string | null
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: BigIntFilter<"AuditLog"> | bigint | number
    user_id?: StringFilter<"AuditLog"> | string
    action?: StringFilter<"AuditLog"> | string
    target_resource_id?: StringNullableFilter<"AuditLog"> | string | null
    target_resource_type?: StringNullableFilter<"AuditLog"> | string | null
    ip_address?: StringNullableFilter<"AuditLog"> | string | null
    user_agent?: StringNullableFilter<"AuditLog"> | string | null
    data_snapshot?: JsonNullableFilter<"AuditLog">
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserCreateWithoutSubscriptionInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    templates?: TemplateCreateNestedManyWithoutCreated_byInput
    reports?: ReportCreateNestedManyWithoutUserInput
    audit_logs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    templates?: TemplateUncheckedCreateNestedManyWithoutCreated_byInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    audit_logs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type UserUpsertWithoutSubscriptionInput = {
    update: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UserUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    templates?: TemplateUpdateManyWithoutCreated_byNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    audit_logs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    templates?: TemplateUncheckedUpdateManyWithoutCreated_byNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    audit_logs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TemplateCreateWithoutCategoryInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    created_by: UserCreateNestedOneWithoutTemplatesInput
    sections?: TemplateSectionCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleCreateNestedManyWithoutTemplateInput
    reports?: ReportCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    created_by_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: TemplateSectionUncheckedCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleUncheckedCreateNestedManyWithoutTemplateInput
    reports?: ReportUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateCreateOrConnectWithoutCategoryInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutCategoryInput, TemplateUncheckedCreateWithoutCategoryInput>
  }

  export type TemplateCreateManyCategoryInputEnvelope = {
    data: TemplateCreateManyCategoryInput | TemplateCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type TemplateUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TemplateWhereUniqueInput
    update: XOR<TemplateUpdateWithoutCategoryInput, TemplateUncheckedUpdateWithoutCategoryInput>
    create: XOR<TemplateCreateWithoutCategoryInput, TemplateUncheckedCreateWithoutCategoryInput>
  }

  export type TemplateUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TemplateWhereUniqueInput
    data: XOR<TemplateUpdateWithoutCategoryInput, TemplateUncheckedUpdateWithoutCategoryInput>
  }

  export type TemplateUpdateManyWithWhereWithoutCategoryInput = {
    where: TemplateScalarWhereInput
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyWithoutCategoryInput>
  }

  export type UserCreateWithoutTemplatesInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    audit_logs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTemplatesInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    audit_logs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTemplatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
  }

  export type TemplateCategoryCreateWithoutTemplatesInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type TemplateCategoryUncheckedCreateWithoutTemplatesInput = {
    id?: string
    name: string
    createdAt?: Date | string
  }

  export type TemplateCategoryCreateOrConnectWithoutTemplatesInput = {
    where: TemplateCategoryWhereUniqueInput
    create: XOR<TemplateCategoryCreateWithoutTemplatesInput, TemplateCategoryUncheckedCreateWithoutTemplatesInput>
  }

  export type TemplateSectionCreateWithoutTemplateInput = {
    id?: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    reportData?: ReportDataCreateNestedManyWithoutSectionInput
  }

  export type TemplateSectionUncheckedCreateWithoutTemplateInput = {
    id?: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    reportData?: ReportDataUncheckedCreateNestedManyWithoutSectionInput
  }

  export type TemplateSectionCreateOrConnectWithoutTemplateInput = {
    where: TemplateSectionWhereUniqueInput
    create: XOR<TemplateSectionCreateWithoutTemplateInput, TemplateSectionUncheckedCreateWithoutTemplateInput>
  }

  export type TemplateSectionCreateManyTemplateInputEnvelope = {
    data: TemplateSectionCreateManyTemplateInput | TemplateSectionCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type ActionRuleCreateWithoutTemplateInput = {
    id?: string
    source_action_id: string
    target_section_id: string
    action_text: string
    createdAt?: Date | string
  }

  export type ActionRuleUncheckedCreateWithoutTemplateInput = {
    id?: string
    source_action_id: string
    target_section_id: string
    action_text: string
    createdAt?: Date | string
  }

  export type ActionRuleCreateOrConnectWithoutTemplateInput = {
    where: ActionRuleWhereUniqueInput
    create: XOR<ActionRuleCreateWithoutTemplateInput, ActionRuleUncheckedCreateWithoutTemplateInput>
  }

  export type ActionRuleCreateManyTemplateInputEnvelope = {
    data: ActionRuleCreateManyTemplateInput | ActionRuleCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutTemplateInput = {
    id?: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReportsInput
    reportData?: ReportDataCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutTemplateInput = {
    id?: string
    user_id: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportData?: ReportDataUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutTemplateInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutTemplateInput, ReportUncheckedCreateWithoutTemplateInput>
  }

  export type ReportCreateManyTemplateInputEnvelope = {
    data: ReportCreateManyTemplateInput | ReportCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTemplatesInput = {
    update: XOR<UserUpdateWithoutTemplatesInput, UserUncheckedUpdateWithoutTemplatesInput>
    create: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTemplatesInput, UserUncheckedUpdateWithoutTemplatesInput>
  }

  export type UserUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    audit_logs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    audit_logs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TemplateCategoryUpsertWithoutTemplatesInput = {
    update: XOR<TemplateCategoryUpdateWithoutTemplatesInput, TemplateCategoryUncheckedUpdateWithoutTemplatesInput>
    create: XOR<TemplateCategoryCreateWithoutTemplatesInput, TemplateCategoryUncheckedCreateWithoutTemplatesInput>
    where?: TemplateCategoryWhereInput
  }

  export type TemplateCategoryUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: TemplateCategoryWhereInput
    data: XOR<TemplateCategoryUpdateWithoutTemplatesInput, TemplateCategoryUncheckedUpdateWithoutTemplatesInput>
  }

  export type TemplateCategoryUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateCategoryUncheckedUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateSectionUpsertWithWhereUniqueWithoutTemplateInput = {
    where: TemplateSectionWhereUniqueInput
    update: XOR<TemplateSectionUpdateWithoutTemplateInput, TemplateSectionUncheckedUpdateWithoutTemplateInput>
    create: XOR<TemplateSectionCreateWithoutTemplateInput, TemplateSectionUncheckedCreateWithoutTemplateInput>
  }

  export type TemplateSectionUpdateWithWhereUniqueWithoutTemplateInput = {
    where: TemplateSectionWhereUniqueInput
    data: XOR<TemplateSectionUpdateWithoutTemplateInput, TemplateSectionUncheckedUpdateWithoutTemplateInput>
  }

  export type TemplateSectionUpdateManyWithWhereWithoutTemplateInput = {
    where: TemplateSectionScalarWhereInput
    data: XOR<TemplateSectionUpdateManyMutationInput, TemplateSectionUncheckedUpdateManyWithoutTemplateInput>
  }

  export type TemplateSectionScalarWhereInput = {
    AND?: TemplateSectionScalarWhereInput | TemplateSectionScalarWhereInput[]
    OR?: TemplateSectionScalarWhereInput[]
    NOT?: TemplateSectionScalarWhereInput | TemplateSectionScalarWhereInput[]
    id?: StringFilter<"TemplateSection"> | string
    template_id?: StringFilter<"TemplateSection"> | string
    title?: StringFilter<"TemplateSection"> | string
    default_text?: StringNullableFilter<"TemplateSection"> | string | null
    display_order?: IntFilter<"TemplateSection"> | number
    content?: JsonNullableFilter<"TemplateSection">
    createdAt?: DateTimeFilter<"TemplateSection"> | Date | string
  }

  export type ActionRuleUpsertWithWhereUniqueWithoutTemplateInput = {
    where: ActionRuleWhereUniqueInput
    update: XOR<ActionRuleUpdateWithoutTemplateInput, ActionRuleUncheckedUpdateWithoutTemplateInput>
    create: XOR<ActionRuleCreateWithoutTemplateInput, ActionRuleUncheckedCreateWithoutTemplateInput>
  }

  export type ActionRuleUpdateWithWhereUniqueWithoutTemplateInput = {
    where: ActionRuleWhereUniqueInput
    data: XOR<ActionRuleUpdateWithoutTemplateInput, ActionRuleUncheckedUpdateWithoutTemplateInput>
  }

  export type ActionRuleUpdateManyWithWhereWithoutTemplateInput = {
    where: ActionRuleScalarWhereInput
    data: XOR<ActionRuleUpdateManyMutationInput, ActionRuleUncheckedUpdateManyWithoutTemplateInput>
  }

  export type ActionRuleScalarWhereInput = {
    AND?: ActionRuleScalarWhereInput | ActionRuleScalarWhereInput[]
    OR?: ActionRuleScalarWhereInput[]
    NOT?: ActionRuleScalarWhereInput | ActionRuleScalarWhereInput[]
    id?: StringFilter<"ActionRule"> | string
    template_id?: StringFilter<"ActionRule"> | string
    source_action_id?: StringFilter<"ActionRule"> | string
    target_section_id?: StringFilter<"ActionRule"> | string
    action_text?: StringFilter<"ActionRule"> | string
    createdAt?: DateTimeFilter<"ActionRule"> | Date | string
  }

  export type ReportUpsertWithWhereUniqueWithoutTemplateInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutTemplateInput, ReportUncheckedUpdateWithoutTemplateInput>
    create: XOR<ReportCreateWithoutTemplateInput, ReportUncheckedCreateWithoutTemplateInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutTemplateInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutTemplateInput, ReportUncheckedUpdateWithoutTemplateInput>
  }

  export type ReportUpdateManyWithWhereWithoutTemplateInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutTemplateInput>
  }

  export type TemplateCreateWithoutSectionsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    created_by: UserCreateNestedOneWithoutTemplatesInput
    category?: TemplateCategoryCreateNestedOneWithoutTemplatesInput
    actionRules?: ActionRuleCreateNestedManyWithoutTemplateInput
    reports?: ReportCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutSectionsInput = {
    id?: string
    name: string
    created_by_id: string
    category_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actionRules?: ActionRuleUncheckedCreateNestedManyWithoutTemplateInput
    reports?: ReportUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateCreateOrConnectWithoutSectionsInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutSectionsInput, TemplateUncheckedCreateWithoutSectionsInput>
  }

  export type ReportDataCreateWithoutSectionInput = {
    id?: string
    content?: string | null
    report: ReportCreateNestedOneWithoutReportDataInput
  }

  export type ReportDataUncheckedCreateWithoutSectionInput = {
    id?: string
    report_id: string
    content?: string | null
  }

  export type ReportDataCreateOrConnectWithoutSectionInput = {
    where: ReportDataWhereUniqueInput
    create: XOR<ReportDataCreateWithoutSectionInput, ReportDataUncheckedCreateWithoutSectionInput>
  }

  export type ReportDataCreateManySectionInputEnvelope = {
    data: ReportDataCreateManySectionInput | ReportDataCreateManySectionInput[]
    skipDuplicates?: boolean
  }

  export type TemplateUpsertWithoutSectionsInput = {
    update: XOR<TemplateUpdateWithoutSectionsInput, TemplateUncheckedUpdateWithoutSectionsInput>
    create: XOR<TemplateCreateWithoutSectionsInput, TemplateUncheckedCreateWithoutSectionsInput>
    where?: TemplateWhereInput
  }

  export type TemplateUpdateToOneWithWhereWithoutSectionsInput = {
    where?: TemplateWhereInput
    data: XOR<TemplateUpdateWithoutSectionsInput, TemplateUncheckedUpdateWithoutSectionsInput>
  }

  export type TemplateUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: UserUpdateOneRequiredWithoutTemplatesNestedInput
    category?: TemplateCategoryUpdateOneWithoutTemplatesNestedInput
    actionRules?: ActionRuleUpdateManyWithoutTemplateNestedInput
    reports?: ReportUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutSectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_by_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actionRules?: ActionRuleUncheckedUpdateManyWithoutTemplateNestedInput
    reports?: ReportUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type ReportDataUpsertWithWhereUniqueWithoutSectionInput = {
    where: ReportDataWhereUniqueInput
    update: XOR<ReportDataUpdateWithoutSectionInput, ReportDataUncheckedUpdateWithoutSectionInput>
    create: XOR<ReportDataCreateWithoutSectionInput, ReportDataUncheckedCreateWithoutSectionInput>
  }

  export type ReportDataUpdateWithWhereUniqueWithoutSectionInput = {
    where: ReportDataWhereUniqueInput
    data: XOR<ReportDataUpdateWithoutSectionInput, ReportDataUncheckedUpdateWithoutSectionInput>
  }

  export type ReportDataUpdateManyWithWhereWithoutSectionInput = {
    where: ReportDataScalarWhereInput
    data: XOR<ReportDataUpdateManyMutationInput, ReportDataUncheckedUpdateManyWithoutSectionInput>
  }

  export type ReportDataScalarWhereInput = {
    AND?: ReportDataScalarWhereInput | ReportDataScalarWhereInput[]
    OR?: ReportDataScalarWhereInput[]
    NOT?: ReportDataScalarWhereInput | ReportDataScalarWhereInput[]
    id?: StringFilter<"ReportData"> | string
    report_id?: StringFilter<"ReportData"> | string
    section_id?: StringFilter<"ReportData"> | string
    content?: StringNullableFilter<"ReportData"> | string | null
  }

  export type TemplateCreateWithoutActionRulesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    created_by: UserCreateNestedOneWithoutTemplatesInput
    category?: TemplateCategoryCreateNestedOneWithoutTemplatesInput
    sections?: TemplateSectionCreateNestedManyWithoutTemplateInput
    reports?: ReportCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutActionRulesInput = {
    id?: string
    name: string
    created_by_id: string
    category_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: TemplateSectionUncheckedCreateNestedManyWithoutTemplateInput
    reports?: ReportUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateCreateOrConnectWithoutActionRulesInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutActionRulesInput, TemplateUncheckedCreateWithoutActionRulesInput>
  }

  export type TemplateUpsertWithoutActionRulesInput = {
    update: XOR<TemplateUpdateWithoutActionRulesInput, TemplateUncheckedUpdateWithoutActionRulesInput>
    create: XOR<TemplateCreateWithoutActionRulesInput, TemplateUncheckedCreateWithoutActionRulesInput>
    where?: TemplateWhereInput
  }

  export type TemplateUpdateToOneWithWhereWithoutActionRulesInput = {
    where?: TemplateWhereInput
    data: XOR<TemplateUpdateWithoutActionRulesInput, TemplateUncheckedUpdateWithoutActionRulesInput>
  }

  export type TemplateUpdateWithoutActionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: UserUpdateOneRequiredWithoutTemplatesNestedInput
    category?: TemplateCategoryUpdateOneWithoutTemplatesNestedInput
    sections?: TemplateSectionUpdateManyWithoutTemplateNestedInput
    reports?: ReportUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutActionRulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_by_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: TemplateSectionUncheckedUpdateManyWithoutTemplateNestedInput
    reports?: ReportUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type UserCreateWithoutReportsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    templates?: TemplateCreateNestedManyWithoutCreated_byInput
    audit_logs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    templates?: TemplateUncheckedCreateNestedManyWithoutCreated_byInput
    audit_logs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type TemplateCreateWithoutReportsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    created_by: UserCreateNestedOneWithoutTemplatesInput
    category?: TemplateCategoryCreateNestedOneWithoutTemplatesInput
    sections?: TemplateSectionCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleCreateNestedManyWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    created_by_id: string
    category_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sections?: TemplateSectionUncheckedCreateNestedManyWithoutTemplateInput
    actionRules?: ActionRuleUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type TemplateCreateOrConnectWithoutReportsInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutReportsInput, TemplateUncheckedCreateWithoutReportsInput>
  }

  export type ReportDataCreateWithoutReportInput = {
    id?: string
    content?: string | null
    section: TemplateSectionCreateNestedOneWithoutReportDataInput
  }

  export type ReportDataUncheckedCreateWithoutReportInput = {
    id?: string
    section_id: string
    content?: string | null
  }

  export type ReportDataCreateOrConnectWithoutReportInput = {
    where: ReportDataWhereUniqueInput
    create: XOR<ReportDataCreateWithoutReportInput, ReportDataUncheckedCreateWithoutReportInput>
  }

  export type ReportDataCreateManyReportInputEnvelope = {
    data: ReportDataCreateManyReportInput | ReportDataCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    templates?: TemplateUpdateManyWithoutCreated_byNestedInput
    audit_logs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutCreated_byNestedInput
    audit_logs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TemplateUpsertWithoutReportsInput = {
    update: XOR<TemplateUpdateWithoutReportsInput, TemplateUncheckedUpdateWithoutReportsInput>
    create: XOR<TemplateCreateWithoutReportsInput, TemplateUncheckedCreateWithoutReportsInput>
    where?: TemplateWhereInput
  }

  export type TemplateUpdateToOneWithWhereWithoutReportsInput = {
    where?: TemplateWhereInput
    data: XOR<TemplateUpdateWithoutReportsInput, TemplateUncheckedUpdateWithoutReportsInput>
  }

  export type TemplateUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: UserUpdateOneRequiredWithoutTemplatesNestedInput
    category?: TemplateCategoryUpdateOneWithoutTemplatesNestedInput
    sections?: TemplateSectionUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_by_id?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: TemplateSectionUncheckedUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type ReportDataUpsertWithWhereUniqueWithoutReportInput = {
    where: ReportDataWhereUniqueInput
    update: XOR<ReportDataUpdateWithoutReportInput, ReportDataUncheckedUpdateWithoutReportInput>
    create: XOR<ReportDataCreateWithoutReportInput, ReportDataUncheckedCreateWithoutReportInput>
  }

  export type ReportDataUpdateWithWhereUniqueWithoutReportInput = {
    where: ReportDataWhereUniqueInput
    data: XOR<ReportDataUpdateWithoutReportInput, ReportDataUncheckedUpdateWithoutReportInput>
  }

  export type ReportDataUpdateManyWithWhereWithoutReportInput = {
    where: ReportDataScalarWhereInput
    data: XOR<ReportDataUpdateManyMutationInput, ReportDataUncheckedUpdateManyWithoutReportInput>
  }

  export type ReportCreateWithoutReportDataInput = {
    id?: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReportsInput
    template: TemplateCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutReportDataInput = {
    id?: string
    user_id: string
    template_id: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateOrConnectWithoutReportDataInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutReportDataInput, ReportUncheckedCreateWithoutReportDataInput>
  }

  export type TemplateSectionCreateWithoutReportDataInput = {
    id?: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    template: TemplateCreateNestedOneWithoutSectionsInput
  }

  export type TemplateSectionUncheckedCreateWithoutReportDataInput = {
    id?: string
    template_id: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TemplateSectionCreateOrConnectWithoutReportDataInput = {
    where: TemplateSectionWhereUniqueInput
    create: XOR<TemplateSectionCreateWithoutReportDataInput, TemplateSectionUncheckedCreateWithoutReportDataInput>
  }

  export type ReportUpsertWithoutReportDataInput = {
    update: XOR<ReportUpdateWithoutReportDataInput, ReportUncheckedUpdateWithoutReportDataInput>
    create: XOR<ReportCreateWithoutReportDataInput, ReportUncheckedCreateWithoutReportDataInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutReportDataInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutReportDataInput, ReportUncheckedUpdateWithoutReportDataInput>
  }

  export type ReportUpdateWithoutReportDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    template?: TemplateUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutReportDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateSectionUpsertWithoutReportDataInput = {
    update: XOR<TemplateSectionUpdateWithoutReportDataInput, TemplateSectionUncheckedUpdateWithoutReportDataInput>
    create: XOR<TemplateSectionCreateWithoutReportDataInput, TemplateSectionUncheckedCreateWithoutReportDataInput>
    where?: TemplateSectionWhereInput
  }

  export type TemplateSectionUpdateToOneWithWhereWithoutReportDataInput = {
    where?: TemplateSectionWhereInput
    data: XOR<TemplateSectionUpdateWithoutReportDataInput, TemplateSectionUncheckedUpdateWithoutReportDataInput>
  }

  export type TemplateSectionUpdateWithoutReportDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: TemplateUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type TemplateSectionUncheckedUpdateWithoutReportDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAudit_logsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionCreateNestedOneWithoutUserInput
    templates?: TemplateCreateNestedManyWithoutCreated_byInput
    reports?: ReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAudit_logsInput = {
    id?: string
    name: string
    email: string
    password_hash: string
    cpf: string
    crm: string
    crm_uf: string
    is_admin?: boolean
    is_email_verified?: boolean
    email_verification_token?: string | null
    email_verification_expires_at?: Date | string | null
    stripe_customer_id?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    subscription?: SubscriptionUncheckedCreateNestedOneWithoutUserInput
    templates?: TemplateUncheckedCreateNestedManyWithoutCreated_byInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAudit_logsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
  }

  export type UserUpsertWithoutAudit_logsInput = {
    update: XOR<UserUpdateWithoutAudit_logsInput, UserUncheckedUpdateWithoutAudit_logsInput>
    create: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAudit_logsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAudit_logsInput, UserUncheckedUpdateWithoutAudit_logsInput>
  }

  export type UserUpdateWithoutAudit_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUpdateOneWithoutUserNestedInput
    templates?: TemplateUpdateManyWithoutCreated_byNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAudit_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    crm?: StringFieldUpdateOperationsInput | string
    crm_uf?: StringFieldUpdateOperationsInput | string
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    is_email_verified?: BoolFieldUpdateOperationsInput | boolean
    email_verification_token?: NullableStringFieldUpdateOperationsInput | string | null
    email_verification_expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stripe_customer_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUncheckedUpdateOneWithoutUserNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutCreated_byNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TemplateCreateManyCreated_byInput = {
    id?: string
    name: string
    category_id?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReportCreateManyUserInput = {
    id?: string
    template_id: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: bigint | number
    action: string
    target_resource_id?: string | null
    target_resource_type?: string | null
    ip_address?: string | null
    user_agent?: string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type TemplateUpdateWithoutCreated_byInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: TemplateCategoryUpdateOneWithoutTemplatesNestedInput
    sections?: TemplateSectionUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUpdateManyWithoutTemplateNestedInput
    reports?: ReportUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutCreated_byInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: TemplateSectionUncheckedUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUncheckedUpdateManyWithoutTemplateNestedInput
    reports?: ReportUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateManyWithoutCreated_byInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category_id?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: TemplateUpdateOneRequiredWithoutReportsNestedInput
    reportData?: ReportDataUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportData?: ReportDataUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    template_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    action?: StringFieldUpdateOperationsInput | string
    target_resource_id?: NullableStringFieldUpdateOperationsInput | string | null
    target_resource_type?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    action?: StringFieldUpdateOperationsInput | string
    target_resource_id?: NullableStringFieldUpdateOperationsInput | string | null
    target_resource_type?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    action?: StringFieldUpdateOperationsInput | string
    target_resource_id?: NullableStringFieldUpdateOperationsInput | string | null
    target_resource_type?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    data_snapshot?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateCreateManyCategoryInput = {
    id?: string
    name: string
    created_by_id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TemplateUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by?: UserUpdateOneRequiredWithoutTemplatesNestedInput
    sections?: TemplateSectionUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUpdateManyWithoutTemplateNestedInput
    reports?: ReportUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_by_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sections?: TemplateSectionUncheckedUpdateManyWithoutTemplateNestedInput
    actionRules?: ActionRuleUncheckedUpdateManyWithoutTemplateNestedInput
    reports?: ReportUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_by_id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateSectionCreateManyTemplateInput = {
    id?: string
    title: string
    default_text?: string | null
    display_order: number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ActionRuleCreateManyTemplateInput = {
    id?: string
    source_action_id: string
    target_section_id: string
    action_text: string
    createdAt?: Date | string
  }

  export type ReportCreateManyTemplateInput = {
    id?: string
    user_id: string
    status?: string
    pdf_url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TemplateSectionUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportData?: ReportDataUpdateManyWithoutSectionNestedInput
  }

  export type TemplateSectionUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportData?: ReportDataUncheckedUpdateManyWithoutSectionNestedInput
  }

  export type TemplateSectionUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    default_text?: NullableStringFieldUpdateOperationsInput | string | null
    display_order?: IntFieldUpdateOperationsInput | number
    content?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionRuleUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source_action_id?: StringFieldUpdateOperationsInput | string
    target_section_id?: StringFieldUpdateOperationsInput | string
    action_text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionRuleUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source_action_id?: StringFieldUpdateOperationsInput | string
    target_section_id?: StringFieldUpdateOperationsInput | string
    action_text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionRuleUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    source_action_id?: StringFieldUpdateOperationsInput | string
    target_section_id?: StringFieldUpdateOperationsInput | string
    action_text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    reportData?: ReportDataUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportData?: ReportDataUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    pdf_url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportDataCreateManySectionInput = {
    id?: string
    report_id: string
    content?: string | null
  }

  export type ReportDataUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    report?: ReportUpdateOneRequiredWithoutReportDataNestedInput
  }

  export type ReportDataUncheckedUpdateWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDataUncheckedUpdateManyWithoutSectionInput = {
    id?: StringFieldUpdateOperationsInput | string
    report_id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDataCreateManyReportInput = {
    id?: string
    section_id: string
    content?: string | null
  }

  export type ReportDataUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    section?: TemplateSectionUpdateOneRequiredWithoutReportDataNestedInput
  }

  export type ReportDataUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    section_id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportDataUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    section_id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemplateCategoryCountOutputTypeDefaultArgs instead
     */
    export type TemplateCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemplateCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemplateCountOutputTypeDefaultArgs instead
     */
    export type TemplateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemplateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemplateSectionCountOutputTypeDefaultArgs instead
     */
    export type TemplateSectionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemplateSectionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportCountOutputTypeDefaultArgs instead
     */
    export type ReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriptionDefaultArgs instead
     */
    export type SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriptionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemplateCategoryDefaultArgs instead
     */
    export type TemplateCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemplateCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemplateDefaultArgs instead
     */
    export type TemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemplateSectionDefaultArgs instead
     */
    export type TemplateSectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemplateSectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActionRuleDefaultArgs instead
     */
    export type ActionRuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActionRuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDataDefaultArgs instead
     */
    export type ReportDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LetterheadDefaultArgs instead
     */
    export type LetterheadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LetterheadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}